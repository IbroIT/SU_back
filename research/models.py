from django.db import models
from django.utils import timezone
from django.core.validators import MinValueValidator, MaxValueValidator


class ResearchArea(models.Model):
    """–û–±–ª–∞—Å—Ç–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π"""
    title_ru = models.CharField("–ù–∞–∑–≤–∞–Ω–∏–µ (—Ä—É—Å)", max_length=200)
    title_en = models.CharField("–ù–∞–∑–≤–∞–Ω–∏–µ (–∞–Ω–≥–ª)", max_length=200)
    title_kg = models.CharField("–ù–∞–∑–≤–∞–Ω–∏–µ (–∫—ã—Ä)", max_length=200)
    
    description_ru = models.TextField("–û–ø–∏—Å–∞–Ω–∏–µ (—Ä—É—Å)")
    description_en = models.TextField("–û–ø–∏—Å–∞–Ω–∏–µ (–∞–Ω–≥–ª)")
    description_kg = models.TextField("–û–ø–∏—Å–∞–Ω–∏–µ (–∫—ã—Ä)")
    
    icon = models.CharField("–ò–∫–æ–Ω–∫–∞", max_length=100, default="üî¨")
    color = models.CharField("–¶–≤–µ—Ç", max_length=50, default="blue")
    
    projects_count = models.IntegerField("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–µ–∫—Ç–æ–≤", default=0)
    publications_count = models.IntegerField("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–π", default=0)
    researchers_count = models.IntegerField("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª–µ–π", default=0)
    
    is_active = models.BooleanField("–ê–∫—Ç–∏–≤–Ω–æ", default=True)
    created_at = models.DateTimeField("–°–æ–∑–¥–∞–Ω–æ", auto_now_add=True)
    
    class Meta:
        verbose_name = "–û–±–ª–∞—Å—Ç—å –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π"
        verbose_name_plural = "–û–±–ª–∞—Å—Ç–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π"
        ordering = ['id']
        
    def __str__(self):
        return self.title_ru


class ResearchCenter(models.Model):
    """–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Ü–µ–Ω—Ç—Ä—ã"""
    name_ru = models.CharField("–ù–∞–∑–≤–∞–Ω–∏–µ (—Ä—É—Å)", max_length=200)
    name_en = models.CharField("–ù–∞–∑–≤–∞–Ω–∏–µ (–∞–Ω–≥–ª)", max_length=200)
    name_kg = models.CharField("–ù–∞–∑–≤–∞–Ω–∏–µ (–∫—ã—Ä)", max_length=200)
    
    description_ru = models.TextField("–û–ø–∏—Å–∞–Ω–∏–µ (—Ä—É—Å)")
    description_en = models.TextField("–û–ø–∏—Å–∞–Ω–∏–µ (–∞–Ω–≥–ª)")
    description_kg = models.TextField("–û–ø–∏—Å–∞–Ω–∏–µ (–∫—ã—Ä)")
    
    director_ru = models.CharField("–î–∏—Ä–µ–∫—Ç–æ—Ä (—Ä—É—Å)", max_length=200)
    director_en = models.CharField("–î–∏—Ä–µ–∫—Ç–æ—Ä (–∞–Ω–≥–ª)", max_length=200)
    director_kg = models.CharField("–î–∏—Ä–µ–∫—Ç–æ—Ä (–∫—ã—Ä)", max_length=200)
    staff_count = models.IntegerField("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤", default=0)
    established_year = models.IntegerField("–ì–æ–¥ –æ—Å–Ω–æ–≤–∞–Ω–∏—è")
    
    equipment_ru = models.TextField("–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ (—Ä—É—Å)", blank=True)
    equipment_en = models.TextField("–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ (–∞–Ω–≥–ª)", blank=True)
    equipment_kg = models.TextField("–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ (–∫—ã—Ä)", blank=True)
    
    image = models.ImageField("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", upload_to='research/centers/', blank=True)
    website = models.URLField("–í–µ–±-—Å–∞–π—Ç", blank=True)
    email = models.EmailField("Email", blank=True)
    phone = models.CharField("–¢–µ–ª–µ—Ñ–æ–Ω", max_length=20, blank=True)
    
    is_active = models.BooleanField("–ê–∫—Ç–∏–≤–Ω–æ", default=True)
    created_at = models.DateTimeField("–°–æ–∑–¥–∞–Ω–æ", auto_now_add=True)
    
    class Meta:
        verbose_name = "–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ü–µ–Ω—Ç—Ä"
        verbose_name_plural = "–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Ü–µ–Ω—Ç—Ä—ã"
        ordering = ['name_ru']
        
    def __str__(self):
        return self.name_ru


class Grant(models.Model):
    """–ì—Ä–∞–Ω—Ç—ã"""
    CATEGORY_CHOICES = [
        ('youth', '–ú–æ–ª–æ–¥–µ–∂–Ω—ã–µ'),
        ('international', '–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ'),
        ('fundamental', '–§—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ'),
        ('applied', '–ü—Ä–∏–∫–ª–∞–¥–Ω—ã–µ'),
        ('innovative', '–ò–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ'),
        ('clinical', '–ö–ª–∏–Ω–∏—á–µ—Å–∫–∏–µ'),
    ]
    
    STATUS_CHOICES = [
        ('active', '–ê–∫—Ç–∏–≤–Ω—ã–π'),
        ('upcoming', '–ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–π'),
        ('closed', '–ó–∞–∫—Ä—ã—Ç—ã–π'),
    ]
    
    title_ru = models.CharField("–ù–∞–∑–≤–∞–Ω–∏–µ (—Ä—É—Å)", max_length=300)
    title_en = models.CharField("–ù–∞–∑–≤–∞–Ω–∏–µ (–∞–Ω–≥–ª)", max_length=300)
    title_kg = models.CharField("–ù–∞–∑–≤–∞–Ω–∏–µ (–∫—ã—Ä)", max_length=300)
    
    organization_ru = models.CharField("–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è (—Ä—É—Å)", max_length=200)
    organization_en = models.CharField("–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è (–∞–Ω–≥–ª)", max_length=200)
    organization_kg = models.CharField("–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è (–∫—ã—Ä)", max_length=200)
    amount = models.CharField("–°—É–º–º–∞", max_length=100)
    deadline = models.DateField("–î–µ–¥–ª–∞–π–Ω –ø–æ–¥–∞—á–∏")
    
    category = models.CharField("–ö–∞—Ç–µ–≥–æ—Ä–∏—è", max_length=20, choices=CATEGORY_CHOICES)
    status = models.CharField("–°—Ç–∞—Ç—É—Å", max_length=20, choices=STATUS_CHOICES, default='active')
    
    duration_ru = models.CharField("–°—Ä–æ–∫ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ (—Ä—É—Å)", max_length=100)
    duration_en = models.CharField("–°—Ä–æ–∫ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ (–∞–Ω–≥–ª)", max_length=100)
    duration_kg = models.CharField("–°—Ä–æ–∫ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ (–∫—ã—Ä)", max_length=100)
    
    requirements_ru = models.TextField("–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è (—Ä—É—Å)")
    requirements_en = models.TextField("–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è (–∞–Ω–≥–ª)")
    requirements_kg = models.TextField("–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è (–∫—ã—Ä)")
    
    description_ru = models.TextField("–û–ø–∏—Å–∞–Ω–∏–µ (—Ä—É—Å)")
    description_en = models.TextField("–û–ø–∏—Å–∞–Ω–∏–µ (–∞–Ω–≥–ª)")
    description_kg = models.TextField("–û–ø–∏—Å–∞–Ω–∏–µ (–∫—ã—Ä)")
    
    contact = models.EmailField("–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π email")
    website = models.URLField("–í–µ–±-—Å–∞–π—Ç")
    application_url = models.URLField("–°—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏", blank=True, help_text="–í–Ω–µ—à–Ω—è—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ –≥—Ä–∞–Ω—Ç")
    
    is_active = models.BooleanField("–ê–∫—Ç–∏–≤–Ω–æ", default=True)
    created_at = models.DateTimeField("–°–æ–∑–¥–∞–Ω–æ", auto_now_add=True)
    updated_at = models.DateTimeField("–û–±–Ω–æ–≤–ª–µ–Ω–æ", auto_now=True)
    
    class Meta:
        verbose_name = "–ì—Ä–∞–Ω—Ç"
        verbose_name_plural = "–ì—Ä–∞–Ω—Ç—ã"
        ordering = ['-created_at']
        
    def __str__(self):
        return f"{self.title_ru} ({self.organization_ru})"
    
    @property
    def is_deadline_soon(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–∫–æ—Ä–æ –ª–∏ –¥–µ–¥–ª–∞–π–Ω (–º–µ–Ω–µ–µ 30 –¥–Ω–µ–π)"""
        days_left = (self.deadline - timezone.now().date()).days
        return days_left <= 30


class Conference(models.Model):
    """–ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏"""
    STATUS_CHOICES = [
        ('registration-open', '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∞'),
        ('early-bird', '–†–∞–Ω–Ω—è—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'),
        ('call-for-papers', '–ü—Ä–∏–µ–º –¥–æ–∫–ª–∞–¥–æ–≤'),
        ('completed', '–ó–∞–≤–µ—Ä—à–µ–Ω–∞'),
    ]
    
    title_ru = models.CharField("–ù–∞–∑–≤–∞–Ω–∏–µ (—Ä—É—Å)", max_length=300)
    title_en = models.CharField("–ù–∞–∑–≤–∞–Ω–∏–µ (–∞–Ω–≥–ª)", max_length=300)
    title_kg = models.CharField("–ù–∞–∑–≤–∞–Ω–∏–µ (–∫—ã—Ä)", max_length=300)
    
    start_date = models.DateField("–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞")
    end_date = models.DateField("–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è")
    
    location_ru = models.CharField("–ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è (—Ä—É—Å)", max_length=200)
    location_en = models.CharField("–ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è (–∞–Ω–≥–ª)", max_length=200)
    location_kg = models.CharField("–ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è (–∫—ã—Ä)", max_length=200)
    
    deadline = models.DateField("–î–µ–¥–ª–∞–π–Ω —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")
    website = models.URLField("–í–µ–±-—Å–∞–π—Ç")
    
    description_ru = models.TextField("–û–ø–∏—Å–∞–Ω–∏–µ (—Ä—É—Å)")
    description_en = models.TextField("–û–ø–∏—Å–∞–Ω–∏–µ (–∞–Ω–≥–ª)")
    description_kg = models.TextField("–û–ø–∏—Å–∞–Ω–∏–µ (–∫—ã—Ä)")
    
    topics_ru = models.JSONField("–¢–µ–º—ã (—Ä—É—Å)", default=list)
    topics_en = models.JSONField("–¢–µ–º—ã (–∞–Ω–≥–ª)", default=list)
    topics_kg = models.JSONField("–¢–µ–º—ã (–∫—ã—Ä)", default=list)
    
    speakers_ru = models.JSONField("–°–ø–∏–∫–µ—Ä—ã (—Ä—É—Å)", default=list)
    speakers_en = models.JSONField("–°–ø–∏–∫–µ—Ä—ã (–∞–Ω–≥–ª)", default=list)
    speakers_kg = models.JSONField("–°–ø–∏–∫–µ—Ä—ã (–∫—ã—Ä)", default=list)
    
    speakers_count = models.IntegerField("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–∏–∫–µ—Ä–æ–≤", default=0)
    participants_limit = models.IntegerField("–õ–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", null=True, blank=True)
    
    image = models.ImageField("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", upload_to='research/conferences/', blank=True)
    status = models.CharField("–°—Ç–∞—Ç—É—Å", max_length=30, choices=STATUS_CHOICES, default='registration-open')
    
    is_active = models.BooleanField("–ê–∫—Ç–∏–≤–Ω–æ", default=True)
    created_at = models.DateTimeField("–°–æ–∑–¥–∞–Ω–æ", auto_now_add=True)
    
    class Meta:
        verbose_name = "–ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è"
        verbose_name_plural = "–ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏"
        ordering = ['start_date']
        
    def __str__(self):
        return f"{self.title_ru} ({self.start_date})"
    
    @property
    def is_upcoming(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø—Ä–µ–¥—Å—Ç–æ—è—â–∞—è –ª–∏ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è"""
        return self.start_date > timezone.now().date()


class Publication(models.Model):
    """–ù–∞—É—á–Ω—ã–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
    PUBLICATION_TYPE_CHOICES = [
        ('article', '–°—Ç–∞—Ç—å—è'),
        ('book', '–ö–Ω–∏–≥–∞'),
        ('conference', '–ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è'),
        ('patent', '–ü–∞—Ç–µ–Ω—Ç'),
        ('thesis', '–î–∏—Å—Å–µ—Ä—Ç–∞—Ü–∏—è'),
    ]
    
    title_ru = models.CharField("–ù–∞–∑–≤–∞–Ω–∏–µ (—Ä—É—Å)", max_length=500)
    title_en = models.CharField("–ù–∞–∑–≤–∞–Ω–∏–µ (–∞–Ω–≥–ª)", max_length=500)
    title_kg = models.CharField("–ù–∞–∑–≤–∞–Ω–∏–µ (–∫—ã—Ä)", max_length=500)
    
    authors_ru = models.CharField("–ê–≤—Ç–æ—Ä—ã (—Ä—É—Å)", max_length=500)
    authors_en = models.CharField("–ê–≤—Ç–æ—Ä—ã (–∞–Ω–≥–ª)", max_length=500)
    authors_kg = models.CharField("–ê–≤—Ç–æ—Ä—ã (–∫—ã—Ä)", max_length=500)
    
    journal_ru = models.CharField("–ñ—É—Ä–Ω–∞–ª/–ò–∑–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ (—Ä—É—Å)", max_length=300, default='')
    journal_en = models.CharField("–ñ—É—Ä–Ω–∞–ª/–ò–∑–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ (–∞–Ω–≥–ª)", max_length=300, default='')
    journal_kg = models.CharField("–ñ—É—Ä–Ω–∞–ª/–ò–∑–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ (–∫—ã—Ä)", max_length=300, default='') 

    
    publication_date = models.DateField("–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
    publication_type = models.CharField("–¢–∏–ø –ø—É–±–ª–∏–∫–∞—Ü–∏–∏", max_length=20, choices=PUBLICATION_TYPE_CHOICES, default='article')
    
    impact_factor = models.DecimalField("–ò–º–ø–∞–∫—Ç-—Ñ–∞–∫—Ç–æ—Ä", max_digits=5, decimal_places=2, null=True, blank=True)
    citations_count = models.IntegerField("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏–π", default=0)
    
    doi = models.CharField("DOI", max_length=100, blank=True)
    url = models.URLField("–°—Å—ã–ª–∫–∞", blank=True)
    
    abstract_ru = models.TextField("–ê–Ω–Ω–æ—Ç–∞—Ü–∏—è (—Ä—É—Å)", blank=True)
    abstract_en = models.TextField("–ê–Ω–Ω–æ—Ç–∞—Ü–∏—è (–∞–Ω–≥–ª)", blank=True)
    abstract_kg = models.TextField("–ê–Ω–Ω–æ—Ç–∞—Ü–∏—è (–∫—ã—Ä)", blank=True)
    
    keywords_ru = models.JSONField("–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ (—Ä—É—Å)", default=list)
    keywords_en = models.JSONField("–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ (–∞–Ω–≥–ª)", default=list)
    keywords_kg = models.JSONField("–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ (–∫—ã—Ä)", default=list)
    
    research_area = models.ForeignKey(
        ResearchArea, on_delete=models.SET_NULL, null=True, blank=True, verbose_name="–û–±–ª–∞—Å—Ç—å –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π"
    )
    research_center = models.ForeignKey(
        ResearchCenter, on_delete=models.SET_NULL, null=True, blank=True, verbose_name="–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ü–µ–Ω—Ç—Ä"
    )
    
    file = models.FileField("–§–∞–π–ª", upload_to='research/publications/', blank=True)
    
    is_featured = models.BooleanField("–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è", default=False)
    is_active = models.BooleanField("–ê–∫—Ç–∏–≤–Ω–æ", default=True)
    created_at = models.DateTimeField("–°–æ–∑–¥–∞–Ω–æ", auto_now_add=True)
    
    class Meta:
        verbose_name = "–ü—É–±–ª–∏–∫–∞—Ü–∏—è"
        verbose_name_plural = "–ü—É–±–ª–∏–∫–∞—Ü–∏–∏"
        ordering = ['-publication_date']
        
    def __str__(self):
        return f"{self.title_ru} ({self.publication_date.year})"


class GrantApplication(models.Model):
    """–ó–∞—è–≤–∫–∏ –Ω–∞ –≥—Ä–∞–Ω—Ç—ã"""
    STATUS_CHOICES = [
        ('pending', '–ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏'),
        ('approved', '–û–¥–æ–±—Ä–µ–Ω–æ'),
        ('rejected', '–û—Ç–∫–ª–æ–Ω–µ–Ω–æ'),
    ]
    
    grant = models.ForeignKey(Grant, on_delete=models.CASCADE, verbose_name="–ì—Ä–∞–Ω—Ç")
    
    project_title = models.CharField("–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞", max_length=300)
    principal_investigator = models.CharField("–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –ø—Ä–æ–µ–∫—Ç–∞", max_length=200)
    email = models.EmailField("Email")
    phone = models.CharField("–¢–µ–ª–µ—Ñ–æ–Ω", max_length=20, blank=True)
    department = models.CharField("–ö–∞—Ñ–µ–¥—Ä–∞/–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è", max_length=200)
    team_members = models.TextField("–ß–ª–µ–Ω—ã –∫–æ–º–∞–Ω–¥—ã", blank=True)
    
    project_description = models.TextField("–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞")
    budget = models.IntegerField("–ë—é–¥–∂–µ—Ç", validators=[MinValueValidator(0)])
    timeline = models.IntegerField("–°—Ä–æ–∫ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ (–º–µ—Å—è—Ü—ã)", validators=[MinValueValidator(1)])
    expected_results = models.TextField("–û–∂–∏–¥–∞–µ–º—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
    
    files = models.FileField("–ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã", upload_to='research/applications/', blank=True)
    
    status = models.CharField("–°—Ç–∞—Ç—É—Å", max_length=20, choices=STATUS_CHOICES, default='pending')
    admin_notes = models.TextField("–ó–∞–º–µ—Ç–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", blank=True)
    
    submitted_at = models.DateTimeField("–ü–æ–¥–∞–Ω–æ", auto_now_add=True)
    reviewed_at = models.DateTimeField("–†–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–æ", null=True, blank=True)
    
    class Meta:
        verbose_name = "–ó–∞—è–≤–∫–∞ –Ω–∞ –≥—Ä–∞–Ω—Ç"
        verbose_name_plural = "–ó–∞—è–≤–∫–∏ –Ω–∞ –≥—Ä–∞–Ω—Ç—ã"
        ordering = ['-submitted_at']
        
    def __str__(self):
        return f"{self.project_title} - {self.principal_investigator}"


class ResearchManagementPosition(models.Model):
    """–î–æ–ª–∂–Ω–æ—Å—Ç–∏ –≤ –Ω–∞—É—á–Ω–æ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏"""
    POSITION_TYPE_CHOICES = [
        ('leadership', '–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ'),
        ('institute', '–ò–Ω—Å—Ç–∏—Ç—É—Ç'),
        ('center', '–¶–µ–Ω—Ç—Ä'),
        ('department', '–ö–∞—Ñ–µ–¥—Ä–∞'),
        ('council', '–ù–∞—É—á–Ω—ã–π —Å–æ–≤–µ—Ç'),
        ('commission', '–ö–æ–º–∏—Å—Å–∏—è'),
    ]

    title_ru = models.CharField("–î–æ–ª–∂–Ω–æ—Å—Ç—å (—Ä—É—Å)", max_length=200)
    title_en = models.CharField("–î–æ–ª–∂–Ω–æ—Å—Ç—å (–∞–Ω–≥–ª)", max_length=200)
    title_kg = models.CharField("–î–æ–ª–∂–Ω–æ—Å—Ç—å (–∫—ã—Ä)", max_length=200)
    
    full_name_ru = models.CharField("–§–ò–û (—Ä—É—Å)", max_length=200)
    full_name_en = models.CharField("–§–ò–û (–∞–Ω–≥–ª)", max_length=200)
    full_name_kg = models.CharField("–§–ò–û (–∫—ã—Ä)", max_length=200)
    
    position_type = models.CharField("–¢–∏–ø –¥–æ–ª–∂–Ω–æ—Å—Ç–∏", max_length=20, choices=POSITION_TYPE_CHOICES)
    
    bio_ru = models.TextField("–ë–∏–æ–≥—Ä–∞—Ñ–∏—è (—Ä—É—Å)", blank=True)
    bio_en = models.TextField("–ë–∏–æ–≥—Ä–∞—Ñ–∏—è (–∞–Ω–≥–ª)", blank=True)
    bio_kg = models.TextField("–ë–∏–æ–≥—Ä–∞—Ñ–∏—è (–∫—ã—Ä)", blank=True)
    
    education_ru = models.TextField("–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ (—Ä—É—Å)", blank=True)
    education_en = models.TextField("–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ (–∞–Ω–≥–ª)", blank=True)
    education_kg = models.TextField("–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ (–∫—ã—Ä)", blank=True)
    
    scientific_interests_ru = models.TextField("–ù–∞—É—á–Ω—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã (—Ä—É—Å)", blank=True)
    scientific_interests_en = models.TextField("–ù–∞—É—á–Ω—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã (–∞–Ω–≥–ª)", blank=True)
    scientific_interests_kg = models.TextField("–ù–∞—É—á–Ω—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã (–∫—ã—Ä)", blank=True)
    
    contact_email = models.EmailField("Email", blank=True)
    contact_phone = models.CharField("–¢–µ–ª–µ—Ñ–æ–Ω", max_length=20, blank=True)
    office_location = models.CharField("–ö–∞–±–∏–Ω–µ—Ç", max_length=100, blank=True)
    
    photo = models.ImageField("–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è", upload_to='research/management/', blank=True)
    
    order = models.PositiveIntegerField("–ü–æ—Ä—è–¥–æ–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è", default=0)
    parent = models.ForeignKey('self', on_delete=models.CASCADE, null=True, blank=True, verbose_name="–ü–æ–¥—á–∏–Ω—è–µ—Ç—Å—è")
    
    is_active = models.BooleanField("–ê–∫—Ç–∏–≤–Ω–æ", default=True)
    created_at = models.DateTimeField("–°–æ–∑–¥–∞–Ω–æ", auto_now_add=True)
    
    class Meta:
        verbose_name = "–î–æ–ª–∂–Ω–æ—Å—Ç—å –≤ –Ω–∞—É—á–Ω–æ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏"
        verbose_name_plural = "–î–æ–ª–∂–Ω–æ—Å—Ç–∏ –≤ –Ω–∞—É—á–Ω–æ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏"
        ordering = ['position_type', 'order', 'title_ru']
        
    def __str__(self):
        return f"{self.title_ru} - {self.full_name_ru}"
    
    def get_children(self):
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥—á–∏–Ω–µ–Ω–Ω—ã—Ö"""
        return self.__class__.objects.filter(parent=self, is_active=True).order_by('order', 'title_ru')


class ScientificCouncil(models.Model):
    """–ù–∞—É—á–Ω—ã–µ —Å–æ–≤–µ—Ç—ã"""
    name_ru = models.CharField("–ù–∞–∑–≤–∞–Ω–∏–µ (—Ä—É—Å)", max_length=200)
    name_en = models.CharField("–ù–∞–∑–≤–∞–Ω–∏–µ (–∞–Ω–≥–ª)", max_length=200)
    name_kg = models.CharField("–ù–∞–∑–≤–∞–Ω–∏–µ (–∫—ã—Ä)", max_length=200)
    
    description_ru = models.TextField("–û–ø–∏—Å–∞–Ω–∏–µ (—Ä—É—Å)")
    description_en = models.TextField("–û–ø–∏—Å–∞–Ω–∏–µ (–∞–Ω–≥–ª)")
    description_kg = models.TextField("–û–ø–∏—Å–∞–Ω–∏–µ (–∫—ã—Ä)")
    
    chairman_ru = models.CharField("–ü—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—å (—Ä—É—Å)", max_length=200)
    chairman_en = models.CharField("–ü—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—å (–∞–Ω–≥–ª)", max_length=200)
    chairman_kg = models.CharField("–ü—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—å (–∫—ã—Ä)", max_length=200)
    
    secretary_ru = models.CharField("–°–µ–∫—Ä–µ—Ç–∞—Ä—å (—Ä—É—Å)", max_length=200, blank=True)
    secretary_en = models.CharField("–°–µ–∫—Ä–µ—Ç–∞—Ä—å (–∞–Ω–≥–ª)", max_length=200, blank=True)
    secretary_kg = models.CharField("–°–µ–∫—Ä–µ—Ç–∞—Ä—å (–∫—ã—Ä)", max_length=200, blank=True)
    
    members_ru = models.JSONField("–ß–ª–µ–Ω—ã —Å–æ–≤–µ—Ç–∞ (—Ä—É—Å)", default=list)
    members_en = models.JSONField("–ß–ª–µ–Ω—ã —Å–æ–≤–µ—Ç–∞ (–∞–Ω–≥–ª)", default=list)
    members_kg = models.JSONField("–ß–ª–µ–Ω—ã —Å–æ–≤–µ—Ç–∞ (–∫—ã—Ä)", default=list)
    
    responsibilities_ru = models.TextField("–§—É–Ω–∫—Ü–∏–∏ –∏ –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ (—Ä—É—Å)", blank=True)
    responsibilities_en = models.TextField("–§—É–Ω–∫—Ü–∏–∏ –∏ –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ (–∞–Ω–≥–ª)", blank=True)
    responsibilities_kg = models.TextField("–§—É–Ω–∫—Ü–∏–∏ –∏ –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ (–∫—ã—Ä)", blank=True)
    
    meeting_schedule_ru = models.CharField("–ì—Ä–∞—Ñ–∏–∫ –∑–∞—Å–µ–¥–∞–Ω–∏–π (—Ä—É—Å)", max_length=200, blank=True)
    meeting_schedule_en = models.CharField("–ì—Ä–∞—Ñ–∏–∫ –∑–∞—Å–µ–¥–∞–Ω–∏–π (–∞–Ω–≥–ª)", max_length=200, blank=True)
    meeting_schedule_kg = models.CharField("–ì—Ä–∞—Ñ–∏–∫ –∑–∞—Å–µ–¥–∞–Ω–∏–π (–∫—ã—Ä)", max_length=200, blank=True)
    
    contact_email = models.EmailField("Email", blank=True)
    contact_phone = models.CharField("–¢–µ–ª–µ—Ñ–æ–Ω", max_length=20, blank=True)
    
    is_active = models.BooleanField("–ê–∫—Ç–∏–≤–Ω–æ", default=True)
    created_at = models.DateTimeField("–°–æ–∑–¥–∞–Ω–æ", auto_now_add=True)
    
    class Meta:
        verbose_name = "–ù–∞—É—á–Ω—ã–π —Å–æ–≤–µ—Ç"
        verbose_name_plural = "–ù–∞—É—á–Ω—ã–µ —Å–æ–≤–µ—Ç—ã"
        ordering = ['name_ru']
        
    def __str__(self):
        return self.name_ru


class Commission(models.Model):
    """–ö–æ–º–∏—Å—Å–∏–∏"""
    COMMISSION_TYPE_CHOICES = [
        ('ethics', '–≠—Ç–∏—á–µ—Å–∫–∞—è –∫–æ–º–∏—Å—Å–∏—è'),
        ('qualification', '–ö–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è'),
        ('publication', '–ò–∑–¥–∞—Ç–µ–ª—å—Å–∫–∞—è –∫–æ–º–∏—Å—Å–∏—è'),
        ('grant', '–ì—Ä–∞–Ω—Ç–æ–≤–∞—è –∫–æ–º–∏—Å—Å–∏—è'),
        ('dissertation', '–î–∏—Å—Å–µ—Ä—Ç–∞—Ü–∏–æ–Ω–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è'),
        ('other', '–î—Ä—É–≥–æ–µ'),
    ]
    
    name_ru = models.CharField("–ù–∞–∑–≤–∞–Ω–∏–µ (—Ä—É—Å)", max_length=200)
    name_en = models.CharField("–ù–∞–∑–≤–∞–Ω–∏–µ (–∞–Ω–≥–ª)", max_length=200)
    name_kg = models.CharField("–ù–∞–∑–≤–∞–Ω–∏–µ (–∫—ã—Ä)", max_length=200)
    
    commission_type = models.CharField("–¢–∏–ø –∫–æ–º–∏—Å—Å–∏–∏", max_length=20, choices=COMMISSION_TYPE_CHOICES)
    
    description_ru = models.TextField("–û–ø–∏—Å–∞–Ω–∏–µ (—Ä—É—Å)")
    description_en = models.TextField("–û–ø–∏—Å–∞–Ω–∏–µ (–∞–Ω–≥–ª)")
    description_kg = models.TextField("–û–ø–∏—Å–∞–Ω–∏–µ (–∫—ã—Ä)")
    
    chairman_ru = models.CharField("–ü—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—å (—Ä—É—Å)", max_length=200)
    chairman_en = models.CharField("–ü—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—å (–∞–Ω–≥–ª)", max_length=200)
    chairman_kg = models.CharField("–ü—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—å (–∫—ã—Ä)", max_length=200)
    
    members_ru = models.JSONField("–ß–ª–µ–Ω—ã –∫–æ–º–∏—Å—Å–∏–∏ (—Ä—É—Å)", default=list)
    members_en = models.JSONField("–ß–ª–µ–Ω—ã –∫–æ–º–∏—Å—Å–∏–∏ (–∞–Ω–≥–ª)", default=list)
    members_kg = models.JSONField("–ß–ª–µ–Ω—ã –∫–æ–º–∏—Å—Å–∏–∏ (–∫—ã—Ä)", default=list)
    
    functions_ru = models.TextField("–§—É–Ω–∫—Ü–∏–∏ (—Ä—É—Å)", blank=True)
    functions_en = models.TextField("–§—É–Ω–∫—Ü–∏–∏ (–∞–Ω–≥–ª)", blank=True)
    functions_kg = models.TextField("–§—É–Ω–∫—Ü–∏–∏ (–∫—ã—Ä)", blank=True)
    
    contact_email = models.EmailField("Email", blank=True)
    contact_phone = models.CharField("–¢–µ–ª–µ—Ñ–æ–Ω", max_length=20, blank=True)
    
    is_active = models.BooleanField("–ê–∫—Ç–∏–≤–Ω–æ", default=True)
    created_at = models.DateTimeField("–°–æ–∑–¥–∞–Ω–æ", auto_now_add=True)
    
    class Meta:
        verbose_name = "–ö–æ–º–∏—Å—Å–∏—è"
        verbose_name_plural = "–ö–æ–º–∏—Å—Å–∏–∏"
        ordering = ['commission_type', 'name_ru']
        
    def __str__(self):
        return self.name_ru


class ScientificJournal(models.Model):
    """–ù–∞—É—á–Ω—ã–µ –∂—É—Ä–Ω–∞–ª—ã —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞"""
    title_ru = models.CharField("–ù–∞–∑–≤–∞–Ω–∏–µ (—Ä—É—Å)", max_length=300)
    title_en = models.CharField("–ù–∞–∑–≤–∞–Ω–∏–µ (–∞–Ω–≥–ª)", max_length=300)
    title_kg = models.CharField("–ù–∞–∑–≤–∞–Ω–∏–µ (–∫—ã—Ä)", max_length=300)
    
    description_ru = models.TextField("–û–ø–∏—Å–∞–Ω–∏–µ (—Ä—É—Å)")
    description_en = models.TextField("–û–ø–∏—Å–∞–Ω–∏–µ (–∞–Ω–≥–ª)")
    description_kg = models.TextField("–û–ø–∏—Å–∞–Ω–∏–µ (–∫—ã—Ä)")
    
    issn = models.CharField("ISSN", max_length=20, blank=True)
    eissn = models.CharField("E-ISSN", max_length=20, blank=True)
    
    editor_in_chief_ru = models.CharField("–ì–ª–∞–≤–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä (—Ä—É—Å)", max_length=200)
    editor_in_chief_en = models.CharField("–ì–ª–∞–≤–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä (–∞–Ω–≥–ª)", max_length=200)
    editor_in_chief_kg = models.CharField("–ì–ª–∞–≤–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä (–∫—ã—Ä)", max_length=200)
    
    editorial_board_ru = models.JSONField("–†–µ–¥–∞–∫—Ü–∏–æ–Ω–Ω–∞—è –∫–æ–ª–ª–µ–≥–∏—è (—Ä—É—Å)", default=list)
    editorial_board_en = models.JSONField("–†–µ–¥–∞–∫—Ü–∏–æ–Ω–Ω–∞—è –∫–æ–ª–ª–µ–≥–∏—è (–∞–Ω–≥–ª)", default=list)
    editorial_board_kg = models.JSONField("–†–µ–¥–∞–∫—Ü–∏–æ–Ω–Ω–∞—è –∫–æ–ª–ª–µ–≥–∏—è (–∫—ã—Ä)", default=list)
    
    publication_frequency_ru = models.CharField("–ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å (—Ä—É—Å)", max_length=100)
    publication_frequency_en = models.CharField("–ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å (–∞–Ω–≥–ª)", max_length=100)
    publication_frequency_kg = models.CharField("–ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å (–∫—ã—Ä)", max_length=100)
    
    scope_ru = models.TextField("–¢–µ–º–∞—Ç–∏–∫–∞ (—Ä—É—Å)", blank=True)
    scope_en = models.TextField("–¢–µ–º–∞—Ç–∏–∫–∞ (–∞–Ω–≥–ª)", blank=True)
    scope_kg = models.TextField("–¢–µ–º–∞—Ç–∏–∫–∞ (–∫—ã—Ä)", blank=True)
    
    submission_guidelines_ru = models.TextField("–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (—Ä—É—Å)", blank=True)
    submission_guidelines_en = models.TextField("–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (–∞–Ω–≥–ª)", blank=True)
    submission_guidelines_kg = models.TextField("–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (–∫—ã—Ä)", blank=True)
    
    cover_image = models.ImageField("–û–±–ª–æ–∂–∫–∞", upload_to='research/journals/', blank=True)
    website = models.URLField("–í–µ–±-—Å–∞–π—Ç", blank=True)
    contact_email = models.EmailField("Email", blank=True)
    
    established_year = models.IntegerField("–ì–æ–¥ –æ—Å–Ω–æ–≤–∞–Ω–∏—è")
    impact_factor = models.DecimalField("–ò–º–ø–∞–∫—Ç-—Ñ–∞–∫—Ç–æ—Ä", max_digits=5, decimal_places=3, null=True, blank=True)
    
    is_open_access = models.BooleanField("–û—Ç–∫—Ä—ã—Ç—ã–π –¥–æ—Å—Ç—É–ø", default=True)
    is_peer_reviewed = models.BooleanField("–†–µ—Ü–µ–Ω–∑–∏—Ä—É–µ–º—ã–π", default=True)
    is_active = models.BooleanField("–ê–∫—Ç–∏–≤–Ω–æ", default=True)
    
    created_at = models.DateTimeField("–°–æ–∑–¥–∞–Ω–æ", auto_now_add=True)
    
    class Meta:
        verbose_name = "–ù–∞—É—á–Ω—ã–π –∂—É—Ä–Ω–∞–ª"
        verbose_name_plural = "–ù–∞—É—á–Ω—ã–µ –∂—É—Ä–Ω–∞–ª—ã"
        ordering = ['title_ru']
        
    def __str__(self):
        return self.title_ru


class JournalIssue(models.Model):
    """–í—ã–ø—É—Å–∫–∏ –∂—É—Ä–Ω–∞–ª–æ–≤"""
    journal = models.ForeignKey(ScientificJournal, on_delete=models.CASCADE, related_name='issues', verbose_name="–ñ—É—Ä–Ω–∞–ª")
    
    volume = models.PositiveIntegerField("–¢–æ–º")
    number = models.PositiveIntegerField("–ù–æ–º–µ—Ä")
    year = models.PositiveIntegerField("–ì–æ–¥")
    
    title_ru = models.CharField("–ù–∞–∑–≤–∞–Ω–∏–µ –≤—ã–ø—É—Å–∫–∞ (—Ä—É—Å)", max_length=300, blank=True)
    title_en = models.CharField("–ù–∞–∑–≤–∞–Ω–∏–µ –≤—ã–ø—É—Å–∫–∞ (–∞–Ω–≥–ª)", max_length=300, blank=True)
    title_kg = models.CharField("–ù–∞–∑–≤–∞–Ω–∏–µ –≤—ã–ø—É—Å–∫–∞ (–∫—ã—Ä)", max_length=300, blank=True)
    
    publication_date = models.DateField("–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
    
    description_ru = models.TextField("–û–ø–∏—Å–∞–Ω–∏–µ (—Ä—É—Å)", blank=True)
    description_en = models.TextField("–û–ø–∏—Å–∞–Ω–∏–µ (–∞–Ω–≥–ª)", blank=True)
    description_kg = models.TextField("–û–ø–∏—Å–∞–Ω–∏–µ (–∫—ã—Ä)", blank=True)
    
    cover_image = models.ImageField("–û–±–ª–æ–∂–∫–∞ –≤—ã–ø—É—Å–∫–∞", upload_to='research/journal_issues/', blank=True)
    pdf_file = models.FileField("PDF —Ñ–∞–π–ª", upload_to='research/journal_issues/pdf/', blank=True)
    
    doi = models.CharField("DOI –≤—ã–ø—É—Å–∫–∞", max_length=100, blank=True)
    pages_count = models.PositiveIntegerField("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü", null=True, blank=True)
    articles_count = models.PositiveIntegerField("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞—Ç–µ–π", default=0)
    
    is_published = models.BooleanField("–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω", default=False)
    is_active = models.BooleanField("–ê–∫—Ç–∏–≤–Ω–æ", default=True)
    
    created_at = models.DateTimeField("–°–æ–∑–¥–∞–Ω–æ", auto_now_add=True)
    updated_at = models.DateTimeField("–û–±–Ω–æ–≤–ª–µ–Ω–æ", auto_now=True)
    
    class Meta:
        verbose_name = "–í—ã–ø—É—Å–∫ –∂—É—Ä–Ω–∞–ª–∞"
        verbose_name_plural = "–í—ã–ø—É—Å–∫–∏ –∂—É—Ä–Ω–∞–ª–æ–≤"
        ordering = ['-year', '-volume', '-number']
        unique_together = ['journal', 'volume', 'number', 'year']
        
    def __str__(self):
        return f"{self.journal.title_ru} - –¢–æ–º {self.volume}, ‚Ññ{self.number} ({self.year})"


class JournalArticle(models.Model):
    """–°—Ç–∞—Ç—å–∏ –≤ –∂—É—Ä–Ω–∞–ª–∞—Ö"""
    issue = models.ForeignKey(JournalIssue, on_delete=models.CASCADE, related_name='articles', verbose_name="–í—ã–ø—É—Å–∫")
    
    title_ru = models.CharField("–ù–∞–∑–≤–∞–Ω–∏–µ (—Ä—É—Å)", max_length=500)
    title_en = models.CharField("–ù–∞–∑–≤–∞–Ω–∏–µ (–∞–Ω–≥–ª)", max_length=500)
    title_kg = models.CharField("–ù–∞–∑–≤–∞–Ω–∏–µ (–∫—ã—Ä)", max_length=500)
    
    authors_ru = models.CharField("–ê–≤—Ç–æ—Ä—ã (—Ä—É—Å)", max_length=500)
    authors_en = models.CharField("–ê–≤—Ç–æ—Ä—ã (–∞–Ω–≥–ª)", max_length=500)
    authors_kg = models.CharField("–ê–≤—Ç–æ—Ä—ã (–∫—ã—Ä)", max_length=500)
    
    abstract_ru = models.TextField("–ê–Ω–Ω–æ—Ç–∞—Ü–∏—è (—Ä—É—Å)")
    abstract_en = models.TextField("–ê–Ω–Ω–æ—Ç–∞—Ü–∏—è (–∞–Ω–≥–ª)")
    abstract_kg = models.TextField("–ê–Ω–Ω–æ—Ç–∞—Ü–∏—è (–∫—ã—Ä)")
    
    keywords_ru = models.JSONField("–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ (—Ä—É—Å)", default=list)
    keywords_en = models.JSONField("–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ (–∞–Ω–≥–ª)", default=list)
    keywords_kg = models.JSONField("–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ (–∫—ã—Ä)", default=list)
    
    pages_start = models.PositiveIntegerField("–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–∞—á–∞–ª–∞")
    pages_end = models.PositiveIntegerField("–°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è")
    
    doi = models.CharField("DOI —Å—Ç–∞—Ç—å–∏", max_length=100, blank=True)
    pdf_file = models.FileField("PDF —Ñ–∞–π–ª —Å—Ç–∞—Ç—å–∏", upload_to='research/journal_articles/', blank=True)
    
    received_date = models.DateField("–î–∞—Ç–∞ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è", null=True, blank=True)
    accepted_date = models.DateField("–î–∞—Ç–∞ –ø—Ä–∏–Ω—è—Ç–∏—è", null=True, blank=True)
    published_date = models.DateField("–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏", null=True, blank=True)
    
    citations_count = models.PositiveIntegerField("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏–π", default=0)
    
    order = models.PositiveIntegerField("–ü–æ—Ä—è–¥–æ–∫ –≤ –≤—ã–ø—É—Å–∫–µ", default=0)
    
    is_open_access = models.BooleanField("–û—Ç–∫—Ä—ã—Ç—ã–π –¥–æ—Å—Ç—É–ø", default=True)
    is_active = models.BooleanField("–ê–∫—Ç–∏–≤–Ω–æ", default=True)
    
    created_at = models.DateTimeField("–°–æ–∑–¥–∞–Ω–æ", auto_now_add=True)
    
    class Meta:
        verbose_name = "–°—Ç–∞—Ç—å—è –∂—É—Ä–Ω–∞–ª–∞"
        verbose_name_plural = "–°—Ç–∞—Ç—å–∏ –∂—É—Ä–Ω–∞–ª–æ–≤"
        ordering = ['issue', 'order', 'pages_start']
        
    def __str__(self):
        return f"{self.title_ru} ({self.issue})"
