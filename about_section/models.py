from django.db import models
from django.core.validators import MinValueValidator, MaxValueValidator


class Partner(models.Model):
    """Model for university partners"""
    
    COLOR_CHOICES = [
        ('from-blue-500 to-indigo-600', 'Blue to Indigo'),
        ('from-purple-500 to-pink-600', 'Purple to Pink'),
        ('from-green-500 to-teal-600', 'Green to Teal'),
        ('from-amber-500 to-orange-600', 'Amber to Orange'),
        ('from-red-500 to-rose-600', 'Red to Rose'),
        ('from-indigo-500 to-blue-600', 'Indigo to Blue'),
        ('from-pink-500 to-rose-600', 'Pink to Rose'),
        ('from-teal-500 to-emerald-600', 'Teal to Emerald'),
        ('from-cyan-500 to-blue-600', 'Cyan to Blue'),
        ('from-yellow-500 to-amber-600', 'Yellow to Amber'),
    ]
    
    GLOW_CHOICES = [
        ('hover:shadow-blue-500/50', 'Blue Glow'),
        ('hover:shadow-purple-500/50', 'Purple Glow'),
        ('hover:shadow-green-500/50', 'Green Glow'),
        ('hover:shadow-amber-500/50', 'Amber Glow'),
        ('hover:shadow-red-500/50', 'Red Glow'),
        ('hover:shadow-indigo-500/50', 'Indigo Glow'),
        ('hover:shadow-pink-500/50', 'Pink Glow'),
        ('hover:shadow-teal-500/50', 'Teal Glow'),
        ('hover:shadow-cyan-500/50', 'Cyan Glow'),
        ('hover:shadow-yellow-500/50', 'Yellow Glow'),
    ]
    
    name = models.CharField(
        max_length=200,
        verbose_name='–ù–∞–∑–≤–∞–Ω–∏–µ –ø–∞—Ä—Ç–Ω–µ—Ä–∞',
        help_text='–ù–∞–∑–≤–∞–Ω–∏–µ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ'
    )
    
    name_en = models.CharField(
        max_length=200,
        verbose_name='Partner Name (English)',
        help_text='Partner name in English',
        blank=True
    )
    
    name_ky = models.CharField(
        max_length=200,
        verbose_name='–®–µ—Ä–∏–∫—Ç–µ—à—Ç–∏–Ω –∞—Ç—ã (–ö—ã—Ä–≥—ã–∑—á–∞)',
        help_text='Partner name in Kyrgyz',
        blank=True
    )
    
    icon = models.CharField(
        max_length=10,
        verbose_name='–ò–∫–æ–Ω–∫–∞',
        help_text='–≠–º–æ–¥–∑–∏ –∏–∫–æ–Ω–∫–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: üè•, üåê)',
        default='ü§ù'
    )
    
    logo = models.ImageField(
        upload_to='partners/logos/',
        verbose_name='–õ–æ–≥–æ—Ç–∏–ø',
        help_text='–õ–æ–≥–æ—Ç–∏–ø –ø–∞—Ä—Ç–Ω–µ—Ä–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –µ—Å–ª–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏–∫–æ–Ω–∫–∞)',
        blank=True,
        null=True
    )
    
    website = models.URLField(
        verbose_name='–í–µ–±-—Å–∞–π—Ç',
        help_text='–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç –ø–∞—Ä—Ç–Ω–µ—Ä–∞',
        blank=True
    )
    
    description = models.TextField(
        verbose_name='–û–ø–∏—Å–∞–Ω–∏–µ',
        help_text='–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –∏ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞',
        blank=True
    )
    
    description_en = models.TextField(
        verbose_name='Description (English)',
        help_text='Brief description in English',
        blank=True
    )
    
    description_ky = models.TextField(
        verbose_name='–°—ã–ø–∞—Ç—Ç–∞–º–∞ (–ö—ã—Ä–≥—ã–∑—á–∞)',
        help_text='Brief description in Kyrgyz',
        blank=True
    )
    
    color_theme = models.CharField(
        max_length=50,
        choices=COLOR_CHOICES,
        default='from-blue-500 to-indigo-600',
        verbose_name='–¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞',
        help_text='–ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω–∞—è —Ü–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞ –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞'
    )
    
    glow_effect = models.CharField(
        max_length=50,
        choices=GLOW_CHOICES,
        default='hover:shadow-blue-500/50',
        verbose_name='–≠—Ñ—Ñ–µ–∫—Ç —Å–≤–µ—á–µ–Ω–∏—è',
        help_text='–≠—Ñ—Ñ–µ–∫—Ç —Å–≤–µ—á–µ–Ω–∏—è –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏'
    )
    
    is_active = models.BooleanField(
        default=True,
        verbose_name='–ê–∫—Ç–∏–≤–µ–Ω',
        help_text='–û—Ç–æ–±—Ä–∞–∂–∞—Ç—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –Ω–∞ —Å–∞–π—Ç–µ'
    )
    
    order = models.PositiveIntegerField(
        default=0,
        validators=[MinValueValidator(0), MaxValueValidator(999)],
        verbose_name='–ü–æ—Ä—è–¥–æ–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è',
        help_text='–ü–æ—Ä—è–¥–æ–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ —Å–∞–π—Ç–µ (0 - –ø–µ—Ä–≤—ã–π)'
    )
    
    created_at = models.DateTimeField(
        auto_now_add=True,
        verbose_name='–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è'
    )
    
    updated_at = models.DateTimeField(
        auto_now=True,
        verbose_name='–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è'
    )
    
    class Meta:
        verbose_name = '–ü–∞—Ä—Ç–Ω–µ—Ä'
        verbose_name_plural = '–ü–∞—Ä—Ç–Ω–µ—Ä—ã'
        ordering = ['order', 'name']
        
    def __str__(self):
        return self.name
    
    def get_display_name(self, language='ru'):
        """Get partner name in specified language"""
        if language == 'en' and self.name_en:
            return self.name_en
        elif language == 'ky' and self.name_ky:
            return self.name_ky
        return self.name
    
    def get_display_description(self, language='ru'):
        """Get partner description in specified language"""
        if language == 'en' and self.description_en:
            return self.description_en
        elif language == 'ky' and self.description_ky:
            return self.description_ky
        return self.description


class AboutSection(models.Model):
    """Model for about section content and settings"""
    
    title = models.CharField(
        max_length=200,
        verbose_name='–ó–∞–≥–æ–ª–æ–≤–æ–∫',
        help_text='–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏ "–û –Ω–∞—Å"'
    )
    
    title_en = models.CharField(
        max_length=200,
        verbose_name='Title (English)',
        help_text='About section title in English',
        blank=True
    )
    
    title_ky = models.CharField(
        max_length=200,
        verbose_name='–ê—Ç–∞–ª—ã—à—ã (–ö—ã—Ä–≥—ã–∑—á–∞)',
        help_text='About section title in Kyrgyz',
        blank=True
    )
    
    subtitle = models.CharField(
        max_length=300,
        verbose_name='–ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫',
        help_text='–ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏',
        blank=True
    )
    
    subtitle_en = models.CharField(
        max_length=300,
        verbose_name='Subtitle (English)',
        help_text='About section subtitle in English',
        blank=True
    )
    
    subtitle_ky = models.CharField(
        max_length=300,
        verbose_name='–°—É–±–∞—Ç–∞–ª—ã—à—ã (–ö—ã—Ä–≥—ã–∑—á–∞)',
        help_text='About section subtitle in Kyrgyz',
        blank=True
    )
    
    content = models.TextField(
        verbose_name='–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ',
        help_text='–û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç —Å–µ–∫—Ü–∏–∏ "–û –Ω–∞—Å"',
        blank=True
    )
    
    content_en = models.TextField(
        verbose_name='Content (English)',
        help_text='About section content in English',
        blank=True
    )
    
    content_ky = models.TextField(
        verbose_name='–ú–∞–∑–º—É–Ω—É (–ö—ã—Ä–≥—ã–∑—á–∞)',
        help_text='About section content in Kyrgyz',
        blank=True
    )
    
    is_active = models.BooleanField(
        default=True,
        verbose_name='–ê–∫—Ç–∏–≤–Ω–∞',
        help_text='–û—Ç–æ–±—Ä–∞–∂–∞—Ç—å —Å–µ–∫—Ü–∏—é –Ω–∞ —Å–∞–π—Ç–µ'
    )
    
    show_partners = models.BooleanField(
        default=True,
        verbose_name='–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤',
        help_text='–û—Ç–æ–±—Ä–∞–∂–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤ –≤ —Å–µ–∫—Ü–∏–∏'
    )
    
    partners_animation_speed = models.FloatField(
        default=0.5,
        validators=[MinValueValidator(0.1), MaxValueValidator(10.0)],
        verbose_name='–°–∫–æ—Ä–æ—Å—Ç—å –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤',
        help_text='–°–∫–æ—Ä–æ—Å—Ç—å –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤ (px per frame)'
    )
    
    created_at = models.DateTimeField(
        auto_now_add=True,
        verbose_name='–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è'
    )
    
    updated_at = models.DateTimeField(
        auto_now=True,
        verbose_name='–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è'
    )
    
    class Meta:
        verbose_name = '–°–µ–∫—Ü–∏—è "–û –Ω–∞—Å"'
        verbose_name_plural = '–°–µ–∫—Ü–∏–∏ "–û –Ω–∞—Å"'
        
    def __str__(self):
        return self.title
    
    def get_display_title(self, language='ru'):
        """Get title in specified language"""
        if language == 'en' and self.title_en:
            return self.title_en
        elif language == 'ky' and self.title_ky:
            return self.title_ky
        return self.title
    
    def get_display_subtitle(self, language='ru'):
        """Get subtitle in specified language"""
        if language == 'en' and self.subtitle_en:
            return self.subtitle_en
        elif language == 'ky' and self.subtitle_ky:
            return self.subtitle_ky
        return self.subtitle
    
    def get_display_content(self, language='ru'):
        """Get content in specified language"""
        if language == 'en' and self.content_en:
            return self.content_en
        elif language == 'ky' and self.content_ky:
            return self.content_ky
        return self.content
