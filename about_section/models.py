from django.db import models
from django.core.validators import MinValueValidator, MaxValueValidator
import json


class Accreditation(models.Model):
    """Model for university accreditations"""
    
    TYPE_CHOICES = [
        ('government', '–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–π'),
        ('international', '–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π'), 
        ('regional', '–†–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–π'),
        ('professional', '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π'),
    ]
    
    COLOR_CHOICES = [
        ('from-blue-500 to-blue-600', 'Blue'),
        ('from-green-500 to-green-600', 'Green'),
        ('from-purple-500 to-purple-600', 'Purple'),
        ('from-orange-500 to-orange-600', 'Orange'),
        ('from-teal-500 to-teal-600', 'Teal'),
        ('from-indigo-500 to-indigo-600', 'Indigo'),
    ]
    
    BADGE_COLOR_CHOICES = [
        ('bg-blue-500', 'Blue Badge'),
        ('bg-green-500', 'Green Badge'),
        ('bg-purple-500', 'Purple Badge'),
        ('bg-orange-500', 'Orange Badge'),
        ('bg-teal-500', 'Teal Badge'),
        ('bg-indigo-500', 'Indigo Badge'),
    ]
    
    title = models.CharField(
        max_length=300,
        verbose_name='–ù–∞–∑–≤–∞–Ω–∏–µ',
        help_text='–ù–∞–∑–≤–∞–Ω–∏–µ –∞–∫–∫—Ä–µ–¥–∏—Ç—É—é—â–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏'
    )
    
    title_en = models.CharField(
        max_length=300,
        verbose_name='Title (English)',
        help_text='Accreditation title in English',
        blank=True
    )
    
    title_ky = models.CharField(
        max_length=300,
        verbose_name='–ê—Ç–∞–ª—ã—à—ã (–ö—ã—Ä–≥—ã–∑—á–∞)',
        help_text='Accreditation title in Kyrgyz',
        blank=True
    )
    
    description = models.TextField(
        verbose_name='–û–ø–∏—Å–∞–Ω–∏–µ',
        help_text='–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∞–∫–∫—Ä–µ–¥–∏—Ç–∞—Ü–∏–∏'
    )
    
    description_en = models.TextField(
        verbose_name='Description (English)',
        help_text='Accreditation description in English',
        blank=True
    )
    
    description_ky = models.TextField(
        verbose_name='–°—ã–ø–∞—Ç—Ç–∞–º–∞ (–ö—ã—Ä–≥—ã–∑—á–∞)',
        help_text='Accreditation description in Kyrgyz',
        blank=True
    )
    
    full_description = models.TextField(
        verbose_name='–ü–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ',
        help_text='–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∞–∫–∫—Ä–µ–¥–∏—Ç–∞—Ü–∏–∏'
    )
    
    full_description_en = models.TextField(
        verbose_name='Full Description (English)',
        help_text='Full accreditation description in English',
        blank=True
    )
    
    full_description_ky = models.TextField(
        verbose_name='–¢–æ–ª—É–∫ —Å—ã–ø–∞—Ç—Ç–∞–º–∞ (–ö—ã—Ä–≥—ã–∑—á–∞)',
        help_text='Full accreditation description in Kyrgyz',
        blank=True
    )
    
    logo = models.CharField(
        max_length=10,
        verbose_name='–≠–º–æ–¥–∑–∏ –∏–∫–æ–Ω–∫–∞',
        help_text='–≠–º–æ–¥–∑–∏ –∏–∫–æ–Ω–∫–∞ –¥–ª—è –∞–∫–∫—Ä–µ–¥–∏—Ç–∞—Ü–∏–∏',
        default='üèõÔ∏è'
    )
    
    year = models.CharField(
        max_length=10,
        verbose_name='–ì–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è',
        help_text='–ì–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫–∫—Ä–µ–¥–∏—Ç–∞—Ü–∏–∏'
    )
    
    status = models.CharField(
        max_length=100,
        verbose_name='–°—Ç–∞—Ç—É—Å',
        help_text='–°—Ç–∞—Ç—É—Å –∞–∫–∫—Ä–µ–¥–∏—Ç–∞—Ü–∏–∏ (–ê–∫—Ç–∏–≤–Ω—ã–π, –ò—Å—Ç–µ–∫—à–∏–π –∏ —Ç.–¥.)',
        default='–ê–∫—Ç–∏–≤–Ω—ã–π'
    )
    
    status_en = models.CharField(
        max_length=100,
        verbose_name='Status (English)',
        help_text='Accreditation status in English',
        blank=True
    )
    
    status_ky = models.CharField(
        max_length=100,
        verbose_name='–ê–±–∞–ª—ã (–ö—ã—Ä–≥—ã–∑—á–∞)',
        help_text='Accreditation status in Kyrgyz',
        blank=True
    )
    
    validity = models.CharField(
        max_length=100,
        verbose_name='–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è',
        help_text='–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∞–∫–∫—Ä–µ–¥–∏—Ç–∞—Ü–∏–∏'
    )
    
    validity_en = models.CharField(
        max_length=100,
        verbose_name='Validity (English)',
        help_text='Accreditation validity in English',
        blank=True
    )
    
    validity_ky = models.CharField(
        max_length=100,
        verbose_name='–ñ–∞—Ä–∞–∫—Ç—É—É–ª—É–∫ –º”©”©–Ω”©—Ç“Ø (–ö—ã—Ä–≥—ã–∑—á–∞)',
        help_text='Accreditation validity in Kyrgyz',
        blank=True
    )
    
    level = models.CharField(
        max_length=100,
        verbose_name='–£—Ä–æ–≤–µ–Ω—å',
        help_text='–£—Ä–æ–≤–µ–Ω—å –∞–∫–∫—Ä–µ–¥–∏—Ç–∞—Ü–∏–∏ (–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π, –ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–π –∏ —Ç.–¥.)'
    )
    
    level_en = models.CharField(
        max_length=100,
        verbose_name='Level (English)',
        help_text='Accreditation level in English',
        blank=True
    )
    
    level_ky = models.CharField(
        max_length=100,
        verbose_name='–î–µ“£–≥—ç—ç–ª–∏ (–ö—ã—Ä–≥—ã–∑—á–∞)',
        help_text='Accreditation level in Kyrgyz',
        blank=True
    )
    
    accreditation_type = models.CharField(
        max_length=20,
        choices=TYPE_CHOICES,
        verbose_name='–¢–∏–ø –∞–∫–∫—Ä–µ–¥–∏—Ç–∞—Ü–∏–∏',
        help_text='–¢–∏–ø –∞–∫–∫—Ä–µ–¥–∏—Ç–∞—Ü–∏–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏'
    )
    
    benefits = models.JSONField(
        verbose_name='–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞',
        help_text='–°–ø–∏—Å–æ–∫ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤ –∞–∫–∫—Ä–µ–¥–∏—Ç–∞—Ü–∏–∏',
        default=list
    )
    
    benefits_en = models.JSONField(
        verbose_name='Benefits (English)',
        help_text='List of benefits in English',
        default=list
    )
    
    benefits_ky = models.JSONField(
        verbose_name='–ê—Ä—Ç—ã–∫—á—ã–ª—ã–∫—Ç–∞—Ä—ã (–ö—ã—Ä–≥—ã–∑—á–∞)',
        help_text='List of benefits in Kyrgyz',
        default=list
    )
    
    color = models.CharField(
        max_length=50,
        choices=COLOR_CHOICES,
        default='from-blue-500 to-blue-600',
        verbose_name='–¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞',
        help_text='–ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω–∞—è —Ü–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞ –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏'
    )
    
    icon_color = models.CharField(
        max_length=50,
        verbose_name='–¶–≤–µ—Ç –∏–∫–æ–Ω–∫–∏',
        help_text='CSS –∫–ª–∞—Å—Å –¥–ª—è —Ü–≤–µ—Ç–∞ –∏–∫–æ–Ω–∫–∏',
        default='text-blue-100'
    )
    
    badge_color = models.CharField(
        max_length=20,
        choices=BADGE_COLOR_CHOICES,
        default='bg-blue-500',
        verbose_name='–¶–≤–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞',
        help_text='–¶–≤–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ —Å–Ω–∏–∑—É –∫–∞—Ä—Ç–æ—á–∫–∏'
    )
    
    order = models.PositiveIntegerField(
        default=0,
        verbose_name='–ü–æ—Ä—è–¥–æ–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è',
        help_text='–ü–æ—Ä—è–¥–æ–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ —Å–∞–π—Ç–µ'
    )
    
    is_active = models.BooleanField(
        default=True,
        verbose_name='–ê–∫—Ç–∏–≤–µ–Ω',
        help_text='–û—Ç–æ–±—Ä–∞–∂–∞—Ç—å –∞–∫–∫—Ä–µ–¥–∏—Ç–∞—Ü–∏—é –Ω–∞ —Å–∞–π—Ç–µ'
    )
    
    created_at = models.DateTimeField(
        auto_now_add=True,
        verbose_name='–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è'
    )
    
    updated_at = models.DateTimeField(
        auto_now=True,
        verbose_name='–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è'
    )
    
    class Meta:
        verbose_name = '–ê–∫–∫—Ä–µ–¥–∏—Ç–∞—Ü–∏—è'
        verbose_name_plural = '–ê–∫–∫—Ä–µ–¥–∏—Ç–∞—Ü–∏–∏'
        ordering = ['order', 'title']
    
    def __str__(self):
        return self.title
    
    def get_display_title(self, language='ru'):
        """Get title in specified language"""
        if language == 'en' and self.title_en:
            return self.title_en
        elif language == 'ky' and self.title_ky:
            return self.title_ky
        return self.title
    
    def get_display_description(self, language='ru'):
        """Get description in specified language"""
        if language == 'en' and self.description_en:
            return self.description_en
        elif language == 'ky' and self.description_ky:
            return self.description_ky
        return self.description
    
    def get_display_full_description(self, language='ru'):
        """Get full description in specified language"""
        if language == 'en' and self.full_description_en:
            return self.full_description_en
        elif language == 'ky' and self.full_description_ky:
            return self.full_description_ky
        return self.full_description
    
    def get_display_status(self, language='ru'):
        """Get status in specified language"""
        if language == 'en' and self.status_en:
            return self.status_en
        elif language == 'ky' and self.status_ky:
            return self.status_ky
        return self.status
    
    def get_display_validity(self, language='ru'):
        """Get validity in specified language"""
        if language == 'en' and self.validity_en:
            return self.validity_en
        elif language == 'ky' and self.validity_ky:
            return self.validity_ky
        return self.validity
    
    def get_display_level(self, language='ru'):
        """Get level in specified language"""
        if language == 'en' and self.level_en:
            return self.level_en
        elif language == 'ky' and self.level_ky:
            return self.level_ky
        return self.level
    
    def get_display_benefits(self, language='ru'):
        """Get benefits in specified language"""
        if language == 'en' and self.benefits_en:
            return self.benefits_en
        elif language == 'ky' and self.benefits_ky:
            return self.benefits_ky
        return self.benefits


class CouncilType(models.Model):
    """Model for different types of councils/committees"""
    
    name = models.CharField(
        max_length=200,
        unique=True,
        verbose_name='–ù–∞–∑–≤–∞–Ω–∏–µ',
        help_text='–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ —Å–æ–≤–µ—Ç–∞/–∫–æ–º–∏—Å—Å–∏–∏'
    )
    
    name_en = models.CharField(
        max_length=200,
        verbose_name='Name (English)',
        help_text='Council type name in English',
        blank=True
    )
    
    name_ky = models.CharField(
        max_length=200,
        verbose_name='–ê—Ç—ã (–ö—ã—Ä–≥—ã–∑—á–∞)',
        help_text='Council type name in Kyrgyz',
        blank=True
    )
    
    slug = models.SlugField(
        unique=True,
        verbose_name='URL –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä',
        help_text='URL –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏'
    )
    
    description = models.TextField(
        verbose_name='–û–ø–∏—Å–∞–Ω–∏–µ',
        help_text='–û–ø–∏—Å–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –∏ –∑–∞–¥–∞—á —Å–æ–≤–µ—Ç–∞/–∫–æ–º–∏—Å—Å–∏–∏'
    )
    
    description_en = models.TextField(
        verbose_name='Description (English)',
        help_text='Council description in English',
        blank=True
    )
    
    description_ky = models.TextField(
        verbose_name='–°—ã–ø–∞—Ç—Ç–∞–º–∞ (–ö—ã—Ä–≥—ã–∑—á–∞)',
        help_text='Council description in Kyrgyz',
        blank=True
    )
    
    order = models.PositiveIntegerField(
        default=0,
        verbose_name='–ü–æ—Ä—è–¥–æ–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è',
        help_text='–ü–æ—Ä—è–¥–æ–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏'
    )
    
    is_active = models.BooleanField(
        default=True,
        verbose_name='–ê–∫—Ç–∏–≤–µ–Ω',
        help_text='–û—Ç–æ–±—Ä–∞–∂–∞—Ç—å –≤ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏'
    )
    
    created_at = models.DateTimeField(
        auto_now_add=True,
        verbose_name='–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è'
    )
    
    updated_at = models.DateTimeField(
        auto_now=True,
        verbose_name='–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è'
    )
    
    class Meta:
        verbose_name = '–¢–∏–ø —Å–æ–≤–µ—Ç–∞/–∫–æ–º–∏—Å—Å–∏–∏'
        verbose_name_plural = '–¢–∏–ø—ã —Å–æ–≤–µ—Ç–æ–≤/–∫–æ–º–∏—Å—Å–∏–π'
        ordering = ['order', 'name']
    
    def __str__(self):
        return self.name
    
    def get_display_name(self, language='ru'):
        """Get name in specified language"""
        if language == 'en' and self.name_en:
            return self.name_en
        elif language == 'ky' and self.name_ky:
            return self.name_ky
        return self.name
    
    def get_display_description(self, language='ru'):
        """Get description in specified language"""
        if language == 'en' and self.description_en:
            return self.description_en
        elif language == 'ky' and self.description_ky:
            return self.description_ky
        return self.description


class CouncilMember(models.Model):
    """Model for council/committee members"""
    
    council_type = models.ForeignKey(
        CouncilType,
        on_delete=models.CASCADE,
        related_name='members',
        verbose_name='–¢–∏–ø —Å–æ–≤–µ—Ç–∞/–∫–æ–º–∏—Å—Å–∏–∏'
    )
    
    name = models.CharField(
        max_length=200,
        verbose_name='–§–ò–û',
        help_text='–ü–æ–ª–Ω–æ–µ –∏–º—è —á–ª–µ–Ω–∞ —Å–æ–≤–µ—Ç–∞/–∫–æ–º–∏—Å—Å–∏–∏'
    )
    
    name_en = models.CharField(
        max_length=200,
        verbose_name='Full Name (English)',
        help_text='Full name in English',
        blank=True
    )
    
    name_ky = models.CharField(
        max_length=200,
        verbose_name='–ê—Ç—ã-–∂”©–Ω“Ø (–ö—ã—Ä–≥—ã–∑—á–∞)',
        help_text='Full name in Kyrgyz',
        blank=True
    )
    
    position = models.CharField(
        max_length=300,
        verbose_name='–î–æ–ª–∂–Ω–æ—Å—Ç—å',
        help_text='–î–æ–ª–∂–Ω–æ—Å—Ç—å –≤ —Å–æ–≤–µ—Ç–µ/–∫–æ–º–∏—Å—Å–∏–∏'
    )
    
    position_en = models.CharField(
        max_length=300,
        verbose_name='Position (English)',
        help_text='Position in English',
        blank=True
    )
    
    position_ky = models.CharField(
        max_length=300,
        verbose_name='–ö—ã–∑–º–∞—Ç—ã (–ö—ã—Ä–≥—ã–∑—á–∞)',
        help_text='Position in Kyrgyz',
        blank=True
    )
    
    department = models.CharField(
        max_length=300,
        verbose_name='–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ',
        help_text='–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –∏–ª–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è'
    )
    
    department_en = models.CharField(
        max_length=300,
        verbose_name='Department (English)',
        help_text='Department in English',
        blank=True
    )
    
    department_ky = models.CharField(
        max_length=300,
        verbose_name='–ë”©–ª“Ø–º“Ø (–ö—ã—Ä–≥—ã–∑—á–∞)',
        help_text='Department in Kyrgyz',
        blank=True
    )
    
    bio = models.TextField(
        verbose_name='–ë–∏–æ–≥—Ä–∞—Ñ–∏—è',
        help_text='–ö—Ä–∞—Ç–∫–∞—è –±–∏–æ–≥—Ä–∞—Ñ–∏—è –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è'
    )
    
    bio_en = models.TextField(
        verbose_name='Biography (English)',
        help_text='Biography in English',
        blank=True
    )
    
    bio_ky = models.TextField(
        verbose_name='”®–º“Ø—Ä –±–∞—è–Ω—ã (–ö—ã—Ä–≥—ã–∑—á–∞)',
        help_text='Biography in Kyrgyz',
        blank=True
    )
    
    photo = models.ImageField(
        upload_to='council_members/',
        verbose_name='–§–æ—Ç–æ',
        help_text='–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —á–ª–µ–Ω–∞ —Å–æ–≤–µ—Ç–∞/–∫–æ–º–∏—Å—Å–∏–∏',
        blank=True,
        null=True
    )
    
    email = models.EmailField(
        verbose_name='Email',
        help_text='–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞',
        blank=True
    )
    
    phone = models.CharField(
        max_length=20,
        verbose_name='–¢–µ–ª–µ—Ñ–æ–Ω',
        help_text='–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω',
        blank=True
    )
    
    order = models.PositiveIntegerField(
        default=0,
        verbose_name='–ü–æ—Ä—è–¥–æ–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è',
        help_text='–ü–æ—Ä—è–¥–æ–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å–ø–∏—Å–∫–µ'
    )
    
    is_active = models.BooleanField(
        default=True,
        verbose_name='–ê–∫—Ç–∏–≤–µ–Ω',
        help_text='–û—Ç–æ–±—Ä–∞–∂–∞—Ç—å –≤ —Å–ø–∏—Å–∫–µ'
    )
    
    created_at = models.DateTimeField(
        auto_now_add=True,
        verbose_name='–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è'
    )
    
    updated_at = models.DateTimeField(
        auto_now=True,
        verbose_name='–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è'
    )
    
    class Meta:
        verbose_name = '–ß–ª–µ–Ω —Å–æ–≤–µ—Ç–∞/–∫–æ–º–∏—Å—Å–∏–∏'
        verbose_name_plural = '–ß–ª–µ–Ω—ã —Å–æ–≤–µ—Ç–æ–≤/–∫–æ–º–∏—Å—Å–∏–π'
        ordering = ['council_type', 'order', 'name']
    
    def __str__(self):
        return f"{self.name} - {self.council_type.name}"
    
    def get_display_name(self, language='ru'):
        """Get name in specified language"""
        if language == 'en' and self.name_en:
            return self.name_en
        elif language == 'ky' and self.name_ky:
            return self.name_ky
        return self.name
    
    def get_display_position(self, language='ru'):
        """Get position in specified language"""
        if language == 'en' and self.position_en:
            return self.position_en
        elif language == 'ky' and self.position_ky:
            return self.position_ky
        return self.position
    
    def get_display_department(self, language='ru'):
        """Get department in specified language"""
        if language == 'en' and self.department_en:
            return self.department_en
        elif language == 'ky' and self.department_ky:
            return self.department_ky
        return self.department
    
    def get_display_bio(self, language='ru'):
        """Get bio in specified language"""
        if language == 'en' and self.bio_en:
            return self.bio_en
        elif language == 'ky' and self.bio_ky:
            return self.bio_ky
        return self.bio


class CouncilDocument(models.Model):
    """Model for council-related documents"""
    
    council_type = models.ForeignKey(
        CouncilType,
        on_delete=models.CASCADE,
        related_name='documents',
        verbose_name='–¢–∏–ø —Å–æ–≤–µ—Ç–∞/–∫–æ–º–∏—Å—Å–∏–∏'
    )
    
    title = models.CharField(
        max_length=300,
        verbose_name='–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞',
        help_text='–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞'
    )
    
    title_en = models.CharField(
        max_length=300,
        verbose_name='Title (English)',
        help_text='Document title in English',
        blank=True
    )
    
    title_ky = models.CharField(
        max_length=300,
        verbose_name='–ê—Ç–∞–ª—ã—à—ã (–ö—ã—Ä–≥—ã–∑—á–∞)',
        help_text='Document title in Kyrgyz',
        blank=True
    )
    
    file = models.FileField(
        upload_to='council_documents/',
        verbose_name='–§–∞–π–ª –¥–æ–∫—É–º–µ–Ω—Ç–∞',
        help_text='–§–∞–π–ª –¥–æ–∫—É–º–µ–Ω—Ç–∞ (PDF, DOC, DOCX)'
    )
    
    date = models.DateField(
        verbose_name='–î–∞—Ç–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞',
        help_text='–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–ª–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞'
    )
    
    size = models.CharField(
        max_length=20,
        verbose_name='–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞',
        help_text='–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2.5 –ú–ë)',
        blank=True
    )
    
    description = models.TextField(
        verbose_name='–û–ø–∏—Å–∞–Ω–∏–µ',
        help_text='–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞',
        blank=True
    )
    
    description_en = models.TextField(
        verbose_name='Description (English)',
        help_text='Document description in English',
        blank=True
    )
    
    description_ky = models.TextField(
        verbose_name='–°—ã–ø–∞—Ç—Ç–∞–º–∞ (–ö—ã—Ä–≥—ã–∑—á–∞)',
        help_text='Document description in Kyrgyz',
        blank=True
    )
    
    order = models.PositiveIntegerField(
        default=0,
        verbose_name='–ü–æ—Ä—è–¥–æ–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è',
        help_text='–ü–æ—Ä—è–¥–æ–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å–ø–∏—Å–∫–µ'
    )
    
    is_active = models.BooleanField(
        default=True,
        verbose_name='–ê–∫—Ç–∏–≤–µ–Ω',
        help_text='–û—Ç–æ–±—Ä–∞–∂–∞—Ç—å –≤ —Å–ø–∏—Å–∫–µ'
    )
    
    created_at = models.DateTimeField(
        auto_now_add=True,
        verbose_name='–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è'
    )
    
    updated_at = models.DateTimeField(
        auto_now=True,
        verbose_name='–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è'
    )
    
    class Meta:
        verbose_name = '–î–æ–∫—É–º–µ–Ω—Ç —Å–æ–≤–µ—Ç–∞/–∫–æ–º–∏—Å—Å–∏–∏'
        verbose_name_plural = '–î–æ–∫—É–º–µ–Ω—Ç—ã —Å–æ–≤–µ—Ç–æ–≤/–∫–æ–º–∏—Å—Å–∏–π'
        ordering = ['council_type', 'order', '-date']
    
    def __str__(self):
        return f"{self.title} - {self.council_type.name}"
    
    def get_display_title(self, language='ru'):
        """Get title in specified language"""
        if language == 'en' and self.title_en:
            return self.title_en
        elif language == 'ky' and self.title_ky:
            return self.title_ky
        return self.title
    
    def get_display_description(self, language='ru'):
        """Get description in specified language"""
        if language == 'en' and self.description_en:
            return self.description_en
        elif language == 'ky' and self.description_ky:
            return self.description_ky
        return self.description
    
    def save(self, *args, **kwargs):
        """Auto-calculate file size on save"""
        if self.file and not self.size:
            try:
                size_bytes = self.file.size
                if size_bytes < 1024:
                    self.size = f"{size_bytes} B"
                elif size_bytes < 1024 * 1024:
                    self.size = f"{size_bytes / 1024:.1f} KB"
                else:
                    self.size = f"{size_bytes / (1024 * 1024):.1f} MB"
            except:
                pass
        super().save(*args, **kwargs)


class Partner(models.Model):
    """Model for university partners"""
    
    COLOR_CHOICES = [
        ('from-blue-500 to-indigo-600', 'Blue to Indigo'),
        ('from-purple-500 to-pink-600', 'Purple to Pink'),
        ('from-green-500 to-teal-600', 'Green to Teal'),
        ('from-amber-500 to-orange-600', 'Amber to Orange'),
        ('from-red-500 to-rose-600', 'Red to Rose'),
        ('from-indigo-500 to-blue-600', 'Indigo to Blue'),
        ('from-pink-500 to-rose-600', 'Pink to Rose'),
        ('from-teal-500 to-emerald-600', 'Teal to Emerald'),
        ('from-cyan-500 to-blue-600', 'Cyan to Blue'),
        ('from-yellow-500 to-amber-600', 'Yellow to Amber'),
    ]
    
    GLOW_CHOICES = [
        ('hover:shadow-blue-500/50', 'Blue Glow'),
        ('hover:shadow-purple-500/50', 'Purple Glow'),
        ('hover:shadow-green-500/50', 'Green Glow'),
        ('hover:shadow-amber-500/50', 'Amber Glow'),
        ('hover:shadow-red-500/50', 'Red Glow'),
        ('hover:shadow-indigo-500/50', 'Indigo Glow'),
        ('hover:shadow-pink-500/50', 'Pink Glow'),
        ('hover:shadow-teal-500/50', 'Teal Glow'),
        ('hover:shadow-cyan-500/50', 'Cyan Glow'),
        ('hover:shadow-yellow-500/50', 'Yellow Glow'),
    ]
    
    name = models.CharField(
        max_length=200,
        verbose_name='–ù–∞–∑–≤–∞–Ω–∏–µ –ø–∞—Ä—Ç–Ω–µ—Ä–∞',
        help_text='–ù–∞–∑–≤–∞–Ω–∏–µ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ'
    )
    
    name_en = models.CharField(
        max_length=200,
        verbose_name='Partner Name (English)',
        help_text='Partner name in English',
        blank=True
    )
    
    name_ky = models.CharField(
        max_length=200,
        verbose_name='–®–µ—Ä–∏–∫—Ç–µ—à—Ç–∏–Ω –∞—Ç—ã (–ö—ã—Ä–≥—ã–∑—á–∞)',
        help_text='Partner name in Kyrgyz',
        blank=True
    )
    
    icon = models.CharField(
        max_length=10,
        verbose_name='–∫–∞—Ç–µ–≥–æ—Ä–∏—è',
        help_text='–≠–º–æ–¥–∑–∏ –∏–∫–æ–Ω–∫–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: üè•, üåê)',
        default='ü§ù'
    )
    
    logo = models.ImageField(
        upload_to='partners/logos/',
        verbose_name='–õ–æ–≥–æ—Ç–∏–ø',
        help_text='–õ–æ–≥–æ—Ç–∏–ø –ø–∞—Ä—Ç–Ω–µ—Ä–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –µ—Å–ª–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏–∫–æ–Ω–∫–∞)',
        blank=True,
        null=True
    )
    
    website = models.URLField(
        verbose_name='–í–µ–±-—Å–∞–π—Ç',
        help_text='–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç –ø–∞—Ä—Ç–Ω–µ—Ä–∞',
        blank=True
    )
    
    # Contact information
    email = models.EmailField(
        verbose_name='Email',
        help_text='–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π email –ø–∞—Ä—Ç–Ω–µ—Ä–∞',
        blank=True
    )
    
    phone = models.CharField(
        max_length=20,
        verbose_name='–¢–µ–ª–µ—Ñ–æ–Ω',
        help_text='–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω –ø–∞—Ä—Ç–Ω–µ—Ä–∞',
        blank=True
    )
    
    # Location fields
    country = models.CharField(
        max_length=100,
        verbose_name='–°—Ç—Ä–∞–Ω–∞',
        help_text='–°—Ç—Ä–∞–Ω–∞ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞',
        default='–ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω'
    )
    
    country_en = models.CharField(
        max_length=100,
        verbose_name='Country (English)',
        help_text='Country name in English',
        blank=True
    )
    
    country_ky = models.CharField(
        max_length=100,
        verbose_name='”®–ª–∫”© (–ö—ã—Ä–≥—ã–∑—á–∞)',
        help_text='Country name in Kyrgyz',
        blank=True
    )
    
    city = models.CharField(
        max_length=100,
        verbose_name='–ì–æ—Ä–æ–¥',
        help_text='–ì–æ—Ä–æ–¥ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞',
        default='–ë–∏—à–∫–µ–∫'
    )
    
    city_en = models.CharField(
        max_length=100,
        verbose_name='City (English)',
        help_text='City name in English',
        blank=True
    )
    
    city_ky = models.CharField(
        max_length=100,
        verbose_name='–®–∞–∞—Ä (–ö—ã—Ä–≥—ã–∑—á–∞)',
        help_text='City name in Kyrgyz',
        blank=True
    )
    
    address = models.CharField(
        max_length=300,
        verbose_name='–ê–¥—Ä–µ—Å',
        help_text='–ü–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å –ø–∞—Ä—Ç–Ω–µ—Ä–∞',
        blank=True
    )
    
    # GPS Coordinates
    latitude = models.DecimalField(
        max_digits=10,
        decimal_places=7,
        verbose_name='–®–∏—Ä–æ—Ç–∞',
        help_text='GPS –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ —à–∏—Ä–æ—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: 42.8746)',
        blank=True,
        null=True
    )
    
    longitude = models.DecimalField(
        max_digits=10,
        decimal_places=7,
        verbose_name='–î–æ–ª–≥–æ—Ç–∞',
        help_text='GPS –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ –¥–æ–ª–≥–æ—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: 74.5698)',
        blank=True,
        null=True
    )
    
    # Partner type
    PARTNER_TYPE_CHOICES = [
        ('clinical', 'üè• –ö–ª–∏–Ω–∏—á–µ—Å–∫–∏–µ –±–∞–∑—ã'),
        ('university', 'üéì –£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç—ã'),
        ('organization', 'üî¨ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏'),
        ('business', 'üíº –ë–∏–∑–Ω–µ—Å-–ø–∞—Ä—Ç–Ω–µ—Ä—ã'),
        ('academic', 'üìö –ê–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∏–µ'),
    ]
    
    partner_type = models.CharField(
        max_length=20,
        choices=PARTNER_TYPE_CHOICES,
        default='academic',
        verbose_name='–¢–∏–ø –ø–∞—Ä—Ç–Ω–µ—Ä–∞',
        help_text='–ö–∞—Ç–µ–≥–æ—Ä–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞'
    )
    
    # Partnership details
    established_year = models.PositiveIntegerField(
        verbose_name='–ì–æ–¥ –æ—Å–Ω–æ–≤–∞–Ω–∏—è',
        help_text='–ì–æ–¥ –æ—Å–Ω–æ–≤–∞–Ω–∏—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏-–ø–∞—Ä—Ç–Ω–µ—Ä–∞',
        blank=True,
        null=True
    )
    
    cooperation_since = models.PositiveIntegerField(
        verbose_name='–°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ —Å',
        help_text='–ì–æ–¥ –Ω–∞—á–∞–ª–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞',
        blank=True,
        null=True
    )
    
    partnership_areas = models.TextField(
        verbose_name='–û–±–ª–∞—Å—Ç–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞',
        help_text='–û–±–ª–∞—Å—Ç–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é',
        blank=True
    )
    
    description = models.TextField(
        verbose_name='–û–ø–∏—Å–∞–Ω–∏–µ',
        help_text='–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –∏ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞',
        blank=True
    )
    
    description_en = models.TextField(
        verbose_name='Description (English)',
        help_text='Brief description in English',
        blank=True
    )
    
    description_ky = models.TextField(
        verbose_name='–°—ã–ø–∞—Ç—Ç–∞–º–∞ (–ö—ã—Ä–≥—ã–∑—á–∞)',
        help_text='Brief description in Kyrgyz',
        blank=True
    )
    
    color_theme = models.CharField(
        max_length=50,
        choices=COLOR_CHOICES,
        default='from-blue-500 to-indigo-600',
        verbose_name='–¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞',
        help_text='–ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω–∞—è —Ü–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞ –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞'
    )
    
    glow_effect = models.CharField(
        max_length=50,
        choices=GLOW_CHOICES,
        default='hover:shadow-blue-500/50',
        verbose_name='–≠—Ñ—Ñ–µ–∫—Ç —Å–≤–µ—á–µ–Ω–∏—è',
        help_text='–≠—Ñ—Ñ–µ–∫—Ç —Å–≤–µ—á–µ–Ω–∏—è –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏'
    )
    
    is_active = models.BooleanField(
        default=True,
        verbose_name='–ê–∫—Ç–∏–≤–µ–Ω',
        help_text='–û—Ç–æ–±—Ä–∞–∂–∞—Ç—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –Ω–∞ —Å–∞–π—Ç–µ'
    )
    
    order = models.PositiveIntegerField(
        default=0,
        validators=[MinValueValidator(0), MaxValueValidator(999)],
        verbose_name='–ü–æ—Ä—è–¥–æ–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è',
        help_text='–ü–æ—Ä—è–¥–æ–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ —Å–∞–π—Ç–µ (0 - –ø–µ—Ä–≤—ã–π)'
    )
    
    created_at = models.DateTimeField(
        auto_now_add=True,
        verbose_name='–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è'
    )
    
    updated_at = models.DateTimeField(
        auto_now=True,
        verbose_name='–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è'
    )
    
    class Meta:
        verbose_name = '–ü–∞—Ä—Ç–Ω–µ—Ä'
        verbose_name_plural = '–ü–∞—Ä—Ç–Ω–µ—Ä—ã'
        ordering = ['order', 'name']
        
    def __str__(self):
        return self.name
    
    def get_display_name(self, language='ru'):
        """Get partner name in specified language"""
        if language == 'en' and self.name_en:
            return self.name_en
        elif language == 'ky' and self.name_ky:
            return self.name_ky
        return self.name
    
    def get_display_description(self, language='ru'):
        """Get partner description in specified language"""
        if language == 'en' and self.description_en:
            return self.description_en
        elif language == 'ky' and self.description_ky:
            return self.description_ky
        return self.description
    
    def get_display_country(self, language='ru'):
        """Get country name in specified language"""
        if language == 'en' and self.country_en:
            return self.country_en
        elif language == 'ky' and self.country_ky:
            return self.country_ky
        return self.country
    
    def get_display_city(self, language='ru'):
        """Get city name in specified language"""
        if language == 'en' and self.city_en:
            return self.city_en
        elif language == 'ky' and self.city_ky:
            return self.city_ky
        return self.city


class AboutSection(models.Model):
    """Model for about section content and settings"""
    
    title = models.CharField(
        max_length=200,
        verbose_name='–ó–∞–≥–æ–ª–æ–≤–æ–∫',
        help_text='–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏ "–û –Ω–∞—Å"'
    )
    
    title_en = models.CharField(
        max_length=200,
        verbose_name='Title (English)',
        help_text='About section title in English',
        blank=True
    )
    
    title_ky = models.CharField(
        max_length=200,
        verbose_name='–ê—Ç–∞–ª—ã—à—ã (–ö—ã—Ä–≥—ã–∑—á–∞)',
        help_text='About section title in Kyrgyz',
        blank=True
    )
    
    subtitle = models.CharField(
        max_length=300,
        verbose_name='–ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫',
        help_text='–ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏',
        blank=True
    )
    
    subtitle_en = models.CharField(
        max_length=300,
        verbose_name='Subtitle (English)',
        help_text='About section subtitle in English',
        blank=True
    )
    
    subtitle_ky = models.CharField(
        max_length=300,
        verbose_name='–°—É–±–∞—Ç–∞–ª—ã—à—ã (–ö—ã—Ä–≥—ã–∑—á–∞)',
        help_text='About section subtitle in Kyrgyz',
        blank=True
    )
    
    content = models.TextField(
        verbose_name='–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ',
        help_text='–û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç —Å–µ–∫—Ü–∏–∏ "–û –Ω–∞—Å"',
        blank=True
    )
    
    content_en = models.TextField(
        verbose_name='Content (English)',
        help_text='About section content in English',
        blank=True
    )
    
    content_ky = models.TextField(
        verbose_name='–ú–∞–∑–º—É–Ω—É (–ö—ã—Ä–≥—ã–∑—á–∞)',
        help_text='About section content in Kyrgyz',
        blank=True
    )
    
    is_active = models.BooleanField(
        default=True,
        verbose_name='–ê–∫—Ç–∏–≤–Ω–∞',
        help_text='–û—Ç–æ–±—Ä–∞–∂–∞—Ç—å —Å–µ–∫—Ü–∏—é –Ω–∞ —Å–∞–π—Ç–µ'
    )
    
    show_partners = models.BooleanField(
        default=True,
        verbose_name='–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤',
        help_text='–û—Ç–æ–±—Ä–∞–∂–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤ –≤ —Å–µ–∫—Ü–∏–∏'
    )
    
    partners_animation_speed = models.FloatField(
        default=0.5,
        validators=[MinValueValidator(0.1), MaxValueValidator(10.0)],
        verbose_name='–°–∫–æ—Ä–æ—Å—Ç—å –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤',
        help_text='–°–∫–æ—Ä–æ—Å—Ç—å –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤ (px per frame)'
    )
    
    created_at = models.DateTimeField(
        auto_now_add=True,
        verbose_name='–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è'
    )
    
    updated_at = models.DateTimeField(
        auto_now=True,
        verbose_name='–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è'
    )
    
    class Meta:
        verbose_name = '–°–µ–∫—Ü–∏—è "–û –Ω–∞—Å"'
        verbose_name_plural = '–°–µ–∫—Ü–∏–∏ "–û –Ω–∞—Å"'
        
    def __str__(self):
        return self.title
    
    def get_display_title(self, language='ru'):
        """Get title in specified language"""
        if language == 'en' and self.title_en:
            return self.title_en
        elif language == 'ky' and self.title_ky:
            return self.title_ky
        return self.title
    
    def get_display_subtitle(self, language='ru'):
        """Get subtitle in specified language"""
        if language == 'en' and self.subtitle_en:
            return self.subtitle_en
        elif language == 'ky' and self.subtitle_ky:
            return self.subtitle_ky
        return self.subtitle
    
    def get_display_content(self, language='ru'):
        """Get content in specified language"""
        if language == 'en' and self.content_en:
            return self.content_en
        elif language == 'ky' and self.content_ky:
            return self.content_ky
        return self.content


class OrganizationStructure(models.Model):
    """Model for university organizational structure"""
    
    STRUCTURE_TYPES = [
        ('leadership', '–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ'),
        ('faculties', '–§–∞–∫—É–ª—å—Ç–µ—Ç—ã'),
        ('administrative', '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è'),
        ('support', '–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è'),
    ]
    
    name_ru = models.CharField(
        max_length=200,
        verbose_name='–ù–∞–∑–≤–∞–Ω–∏–µ (–†—É—Å—Å–∫–∏–π)',
        help_text='–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ'
    )
    
    name_en = models.CharField(
        max_length=200,
        verbose_name='Name (English)',
        help_text='Department name in English',
        blank=True
    )
    
    name_ky = models.CharField(
        max_length=200,
        verbose_name='–ê—Ç–∞–ª—ã—à—ã (–ö—ã—Ä–≥—ã–∑—á–∞)',
        help_text='Department name in Kyrgyz',
        blank=True
    )
    
    head_name_ru = models.CharField(
        max_length=200,
        verbose_name='–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å (–†—É—Å—Å–∫–∏–π)',
        help_text='–§–ò–û —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ',
        blank=True
    )
    
    head_name_en = models.CharField(
        max_length=200,
        verbose_name='Head (English)',
        help_text='Head name in English',
        blank=True
    )
    
    head_name_ky = models.CharField(
        max_length=200,
        verbose_name='–ë–∞—à—á—ã (–ö—ã—Ä–≥—ã–∑—á–∞)',
        help_text='Head name in Kyrgyz',
        blank=True
    )
    
    structure_type = models.CharField(
        max_length=20,
        choices=STRUCTURE_TYPES,
        verbose_name='–¢–∏–ø –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è',
        help_text='–ö–∞—Ç–µ–≥–æ—Ä–∏—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã'
    )
    
    phone = models.CharField(
        max_length=50,
        verbose_name='–¢–µ–ª–µ—Ñ–æ–Ω',
        blank=True
    )
    
    email = models.EmailField(
        verbose_name='Email',
        blank=True
    )
    
    icon = models.CharField(
        max_length=10,
        verbose_name='–ò–∫–æ–Ω–∫–∞',
        help_text='Emoji –∏–∫–æ–Ω–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è',
        default='üè¢'
    )
    
    parent = models.ForeignKey(
        'self',
        on_delete=models.CASCADE,
        null=True,
        blank=True,
        related_name='children',
        verbose_name='–†–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ'
    )
    
    order = models.PositiveIntegerField(
        default=1,
        verbose_name='–ü–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏'
    )
    
    is_active = models.BooleanField(
        default=True,
        verbose_name='–ê–∫—Ç–∏–≤–Ω–æ',
        help_text='–û—Ç–æ–±—Ä–∞–∂–∞—Ç—å –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ —Å–∞–π—Ç–µ'
    )
    
    created_at = models.DateTimeField(
        auto_now_add=True,
        verbose_name='–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è'
    )
    
    updated_at = models.DateTimeField(
        auto_now=True,
        verbose_name='–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è'
    )
    
    class Meta:
        verbose_name = '–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞'
        verbose_name_plural = '–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞'
        ordering = ['structure_type', 'order', 'name_ru']
        
    def __str__(self):
        return self.name_ru
    
    def get_display_name(self, language='ru'):
        """Get name in specified language"""
        if language == 'en' and self.name_en:
            return self.name_en
        elif language == 'ky' and self.name_ky:
            return self.name_ky
        return self.name_ru
    
    def get_display_head_name(self, language='ru'):
        """Get head name in specified language"""
        if language == 'en' and self.head_name_en:
            return self.head_name_en
        elif language == 'ky' and self.head_name_ky:
            return self.head_name_ky
        return self.head_name_ru


class Achievement(models.Model):
    """Model for university achievements"""
    
    CATEGORY_CHOICES = [
        ('education', '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ'),
        ('science', '–ù–∞—É–∫–∞'),
        ('international', '–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–µ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ'),
        ('infrastructure', '–ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞'),
        ('awards', '–ù–∞–≥—Ä–∞–¥—ã'),
        ('research', '–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è'),
        ('innovation', '–ò–Ω–Ω–æ–≤–∞—Ü–∏–∏'),
    ]
    
    ICON_COLOR_CHOICES = [
        ('bg-yellow-500', '–ñ–µ–ª—Ç—ã–π'),
        ('bg-red-500', '–ö—Ä–∞—Å–Ω—ã–π'),
        ('bg-blue-500', '–°–∏–Ω–∏–π'),
        ('bg-purple-500', '–§–∏–æ–ª–µ—Ç–æ–≤—ã–π'),
        ('bg-green-500', '–ó–µ–ª–µ–Ω—ã–π'),
        ('bg-emerald-500', '–ò–∑—É–º—Ä—É–¥–Ω—ã–π'),
        ('bg-indigo-500', '–ò–Ω–¥–∏–≥–æ'),
        ('bg-pink-500', '–†–æ–∑–æ–≤—ã–π'),
        ('bg-orange-500', '–û—Ä–∞–Ω–∂–µ–≤—ã–π'),
        ('bg-teal-500', '–ë–∏—Ä—é–∑–æ–≤—ã–π'),
    ]
    
    title_ru = models.CharField(
        max_length=300,
        verbose_name='–ó–∞–≥–æ–ª–æ–≤–æ–∫ (–†—É—Å—Å–∫–∏–π)',
        help_text='–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ'
    )
    
    title_en = models.CharField(
        max_length=300,
        verbose_name='Title (English)',
        help_text='Achievement title in English',
        blank=True
    )
    
    title_ky = models.CharField(
        max_length=300,
        verbose_name='–ê—Ç–∞–ª—ã—à—ã (–ö—ã—Ä–≥—ã–∑—á–∞)',
        help_text='Achievement title in Kyrgyz',
        blank=True
    )
    
    description_ru = models.TextField(
        verbose_name='–û–ø–∏—Å–∞–Ω–∏–µ (–†—É—Å—Å–∫–∏–π)',
        help_text='–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ'
    )
    
    description_en = models.TextField(
        verbose_name='Description (English)',
        help_text='Achievement description in English',
        blank=True
    )
    
    description_ky = models.TextField(
        verbose_name='–°“Ø—Ä”©—Ç—Ç”©–º”© (–ö—ã—Ä–≥—ã–∑—á–∞)',
        help_text='Achievement description in Kyrgyz',
        blank=True
    )
    
    year = models.PositiveIntegerField(
        verbose_name='–ì–æ–¥',
        help_text='–ì–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è'
    )
    
    category = models.CharField(
        max_length=20,
        choices=CATEGORY_CHOICES,
        verbose_name='–ö–∞—Ç–µ–≥–æ—Ä–∏—è',
        help_text='–ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è'
    )
    
    icon = models.CharField(
        max_length=10,
        verbose_name='–ò–∫–æ–Ω–∫–∞',
        help_text='Emoji –∏–∫–æ–Ω–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è',
        default='üèÜ'
    )
    
    icon_color = models.CharField(
        max_length=20,
        choices=ICON_COLOR_CHOICES,
        verbose_name='–¶–≤–µ—Ç –∏–∫–æ–Ω–∫–∏',
        help_text='CSS –∫–ª–∞—Å—Å —Ü–≤–µ—Ç–∞ –∏–∫–æ–Ω–∫–∏',
        default='bg-yellow-500'
    )
    
    featured = models.BooleanField(
        default=False,
        verbose_name='–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ',
        help_text='–û—Ç–æ–±—Ä–∞–∂–∞—Ç—å –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ'
    )
    
    order = models.PositiveIntegerField(
        default=1,
        verbose_name='–ü–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏'
    )
    
    is_active = models.BooleanField(
        default=True,
        verbose_name='–ê–∫—Ç–∏–≤–Ω–æ',
        help_text='–û—Ç–æ–±—Ä–∞–∂–∞—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –Ω–∞ —Å–∞–π—Ç–µ'
    )
    
    created_at = models.DateTimeField(
        auto_now_add=True,
        verbose_name='–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è'
    )
    
    updated_at = models.DateTimeField(
        auto_now=True,
        verbose_name='–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è'
    )
    
    class Meta:
        verbose_name = '–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ'
        verbose_name_plural = '–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è'
        ordering = ['-featured', '-year', 'order']
        
    def __str__(self):
        return f"{self.title_ru} ({self.year})"
    
    def get_display_title(self, language='ru'):
        """Get title in specified language"""
        if language == 'en' and self.title_en:
            return self.title_en
        elif language == 'ky' and self.title_ky:
            return self.title_ky
        return self.title_ru
    
    def get_display_description(self, language='ru'):
        """Get description in specified language"""
        if language == 'en' and self.description_en:
            return self.description_en
        elif language == 'ky' and self.description_ky:
            return self.description_ky
        return self.description_ru


class UniversityStatistic(models.Model):
    """Model for university statistics"""
    
    name_ru = models.CharField(
        max_length=200,
        verbose_name='–ù–∞–∑–≤–∞–Ω–∏–µ (–†—É—Å—Å–∫–∏–π)',
        help_text='–ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ'
    )
    
    name_en = models.CharField(
        max_length=200,
        verbose_name='Name (English)',
        help_text='Statistic name in English',
        blank=True
    )
    
    name_ky = models.CharField(
        max_length=200,
        verbose_name='–ê—Ç–∞–ª—ã—à—ã (–ö—ã—Ä–≥—ã–∑—á–∞)',
        help_text='Statistic name in Kyrgyz',
        blank=True
    )
    
    value = models.CharField(
        max_length=20,
        verbose_name='–ó–Ω–∞—á–µ–Ω–∏–µ',
        help_text='–ß–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏'
    )
    
    unit = models.CharField(
        max_length=10,
        verbose_name='–ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è',
        help_text='–ù–∞–ø—Ä–∏–º–µ—Ä: %, +, —à—Ç—É–∫',
        blank=True
    )
    
    icon = models.CharField(
        max_length=10,
        verbose_name='–ò–∫–æ–Ω–∫–∞',
        help_text='Emoji –∏–∫–æ–Ω–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è',
        default='üìä'
    )
    
    order = models.PositiveIntegerField(
        default=1,
        verbose_name='–ü–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏'
    )
    
    is_active = models.BooleanField(
        default=True,
        verbose_name='–ê–∫—Ç–∏–≤–Ω–∞',
        help_text='–û—Ç–æ–±—Ä–∞–∂–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–∞ —Å–∞–π—Ç–µ'
    )
    
    created_at = models.DateTimeField(
        auto_now_add=True,
        verbose_name='–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è'
    )
    
    updated_at = models.DateTimeField(
        auto_now=True,
        verbose_name='–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è'
    )
    
    class Meta:
        verbose_name = '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞'
        verbose_name_plural = '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞'
        ordering = ['order', 'name_ru']
        
    def __str__(self):
        return f"{self.name_ru}: {self.value}{self.unit}"
    
    def get_display_name(self, language='ru'):
        """Get name in specified language"""
        if language == 'en' and self.name_en:
            return self.name_en
        elif language == 'ky' and self.name_ky:
            return self.name_ky
        return self.name_ru


class UniversityFounder(models.Model):
    """Model for university founders"""
    
    # Name fields (multilingual)
    name_ru = models.CharField(
        max_length=200,
        verbose_name='–ò–º—è (–†—É—Å—Å–∫–∏–π)',
        help_text='–ü–æ–ª–Ω–æ–µ –∏–º—è –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ'
    )
    
    name_en = models.CharField(
        max_length=200,
        verbose_name='Name (English)',
        help_text='Full name in English',
        blank=True
    )
    
    name_ky = models.CharField(
        max_length=200,
        verbose_name='–ê—Ç—ã (–ö—ã—Ä–≥—ã–∑—á–∞)',
        help_text='Full name in Kyrgyz',
        blank=True
    )
    
    # Position fields (multilingual)
    position_ru = models.CharField(
        max_length=300,
        verbose_name='–î–æ–ª–∂–Ω–æ—Å—Ç—å (–†—É—Å—Å–∫–∏–π)',
        help_text='–î–æ–ª–∂–Ω–æ—Å—Ç—å –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ'
    )
    
    position_en = models.CharField(
        max_length=300,
        verbose_name='Position (English)',
        help_text='Position in English',
        blank=True
    )
    
    position_ky = models.CharField(
        max_length=300,
        verbose_name='–ö—ã–∑–º–∞—Ç –æ—Ä–¥—É (–ö—ã—Ä–≥—ã–∑—á–∞)',
        help_text='Position in Kyrgyz',
        blank=True
    )
    
    # Years of service
    years_ru = models.CharField(
        max_length=100,
        verbose_name='–ì–æ–¥—ã —Å–ª—É–∂–±—ã (–†—É—Å—Å–∫–∏–π)',
        help_text='–ü–µ—Ä–∏–æ–¥ —Ä–∞–±–æ—Ç—ã –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1995-2010)',
        blank=True
    )
    
    years_en = models.CharField(
        max_length=100,
        verbose_name='Years of Service (English)',
        help_text='Period of service in English',
        blank=True
    )
    
    years_ky = models.CharField(
        max_length=100,
        verbose_name='–ö—ã–∑–º–∞—Ç –∂—ã–ª–¥–∞—Ä—ã (–ö—ã—Ä–≥—ã–∑—á–∞)',
        help_text='Service period in Kyrgyz',
        blank=True
    )
    
    # Image
    image = models.ImageField(
        upload_to='founders/',
        verbose_name='–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è',
        help_text='–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—è',
        blank=True,
        null=True
    )
    
    # Description fields (multilingual)
    description_ru = models.TextField(
        verbose_name='–û–ø–∏—Å–∞–Ω–∏–µ (–†—É—Å—Å–∫–∏–π)',
        help_text='–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ'
    )
    
    description_en = models.TextField(
        verbose_name='Description (English)',
        help_text='Detailed description in English',
        blank=True
    )
    
    description_ky = models.TextField(
        verbose_name='–°“Ø—Ä”©—Ç—Ç”©”© (–ö—ã—Ä–≥—ã–∑—á–∞)',
        help_text='Detailed description in Kyrgyz',
        blank=True
    )
    
    # Achievements (JSON field for multilingual support)
    achievements_ru = models.JSONField(
        verbose_name='–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è (–†—É—Å—Å–∫–∏–π)',
        help_text='–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ (JSON –º–∞—Å—Å–∏–≤)',
        default=list,
        blank=True
    )
    
    achievements_en = models.JSONField(
        verbose_name='Achievements (English)',
        help_text='List of achievements in English (JSON array)',
        default=list,
        blank=True
    )
    
    achievements_ky = models.JSONField(
        verbose_name='–ñ–µ—Ç–∏—à–∫–µ–Ω–¥–∏–∫—Ç–µ—Ä (–ö—ã—Ä–≥—ã–∑—á–∞)',
        help_text='List of achievements in Kyrgyz (JSON array)',
        default=list,
        blank=True
    )
    
    # Order for sorting
    order = models.PositiveIntegerField(
        verbose_name='–ü–æ—Ä—è–¥–æ–∫',
        help_text='–ü–æ—Ä—è–¥–æ–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (—á–µ–º –º–µ–Ω—å—à–µ —á–∏—Å–ª–æ, —Ç–µ–º –≤—ã—à–µ)',
        default=0
    )
    
    # Status
    is_active = models.BooleanField(
        verbose_name='–ê–∫—Ç–∏–≤–µ–Ω',
        help_text='–û—Ç–æ–±—Ä–∞–∂–∞—Ç—å –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–∞–π—Ç–µ',
        default=True
    )
    
    # Timestamps
    created_at = models.DateTimeField(
        auto_now_add=True,
        verbose_name='–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è'
    )
    
    updated_at = models.DateTimeField(
        auto_now=True,
        verbose_name='–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è'
    )
    
    class Meta:
        verbose_name = '–û—Å–Ω–æ–≤–∞—Ç–µ–ª—å —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞'
        verbose_name_plural = '–û—Å–Ω–æ–≤–∞—Ç–µ–ª–∏ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞'
        ordering = ['order', 'name_ru']
        
    def __str__(self):
        return self.name_ru
    
    def get_name(self, language='ru'):
        """Get name in specified language"""
        if language == 'en' and self.name_en:
            return self.name_en
        elif language == 'ky' and self.name_ky:
            return self.name_ky
        return self.name_ru
    
    def get_position(self, language='ru'):
        """Get position in specified language"""
        if language == 'en' and self.position_en:
            return self.position_en
        elif language == 'ky' and self.position_ky:
            return self.position_ky
        return self.position_ru
    
    def get_years(self, language='ru'):
        """Get years in specified language"""
        if language == 'en' and self.years_en:
            return self.years_en
        elif language == 'ky' and self.years_ky:
            return self.years_ky
        return self.years_ru
    
    def get_description(self, language='ru'):
        """Get description in specified language"""
        if language == 'en' and self.description_en:
            return self.description_en
        elif language == 'ky' and self.description_ky:
            return self.description_ky
        return self.description_ru
    
    def get_achievements(self, language='ru'):
        """Get achievements in specified language"""
        if language == 'en' and self.achievements_en:
            return self.achievements_en
        elif language == 'ky' and self.achievements_ky:
            return self.achievements_ky
        return self.achievements_ru