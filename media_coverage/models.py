from django.db import models
from django.utils import timezone


class MediaCategory(models.Model):
    """–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–µ–¥–∏–∞-–º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤"""
    TV = 'tv'
    NEWSPAPER = 'newspaper'
    ONLINE = 'online'
    RADIO = 'radio'
    MAGAZINE = 'magazine'
    
    CATEGORY_CHOICES = [
        (TV, '–¢–µ–ª–µ–≤–∏–¥–µ–Ω–∏–µ'),
        (NEWSPAPER, '–ì–∞–∑–µ—Ç—ã'),
        (ONLINE, '–ò–Ω—Ç–µ—Ä–Ω–µ—Ç'),
        (RADIO, '–†–∞–¥–∏–æ'),
        (MAGAZINE, '–ñ—É—Ä–Ω–∞–ª—ã'),
    ]
    
    name = models.CharField(max_length=50, choices=CATEGORY_CHOICES, unique=True, verbose_name='–¢–∏–ø –º–µ–¥–∏–∞')
    slug = models.SlugField(max_length=50, unique=True, verbose_name='URL slug')
    icon = models.CharField(max_length=10, default='üìÑ', verbose_name='–ò–∫–æ–Ω–∫–∞')
    
    # –ú—É–ª—å—Ç–∏—è–∑—ã—á–Ω—ã–µ –ø–æ–ª—è
    name_ru = models.CharField(max_length=100, verbose_name='–ù–∞–∑–≤–∞–Ω–∏–µ (—Ä—É—Å—Å–∫–∏–π)')
    name_kg = models.CharField(max_length=100, verbose_name='–ù–∞–∑–≤–∞–Ω–∏–µ (–∫—ã—Ä–≥—ã–∑—Å–∫–∏–π)')
    name_en = models.CharField(max_length=100, verbose_name='–ù–∞–∑–≤–∞–Ω–∏–µ (–∞–Ω–≥–ª–∏–π—Å–∫–∏–π)')
    
    description_ru = models.TextField(blank=True, verbose_name='–û–ø–∏—Å–∞–Ω–∏–µ (—Ä—É—Å—Å–∫–∏–π)')
    description_kg = models.TextField(blank=True, verbose_name='–û–ø–∏—Å–∞–Ω–∏–µ (–∫—ã—Ä–≥—ã–∑—Å–∫–∏–π)')
    description_en = models.TextField(blank=True, verbose_name='–û–ø–∏—Å–∞–Ω–∏–µ (–∞–Ω–≥–ª–∏–π—Å–∫–∏–π)')
    
    # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    created_at = models.DateTimeField(auto_now_add=True, verbose_name='–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è')
    updated_at = models.DateTimeField(auto_now=True, verbose_name='–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è')
    is_active = models.BooleanField(default=True, verbose_name='–ê–∫—Ç–∏–≤–Ω–æ')
    
    class Meta:
        verbose_name = '–ö–∞—Ç–µ–≥–æ—Ä–∏—è –º–µ–¥–∏–∞'
        verbose_name_plural = '–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–µ–¥–∏–∞'
        ordering = ['name']
    
    def __str__(self):
        return self.name_ru or self.get_name_display()


class MediaOutlet(models.Model):
    """–ú–µ–¥–∏–∞-–∏–∑–¥–∞–Ω–∏—è"""
    name = models.CharField(max_length=200, verbose_name='–ù–∞–∑–≤–∞–Ω–∏–µ –∏–∑–¥–∞–Ω–∏—è')
    slug = models.SlugField(max_length=200, unique=True, verbose_name='URL slug')
    
    # –ú—É–ª—å—Ç–∏—è–∑—ã—á–Ω—ã–µ –ø–æ–ª—è
    name_ru = models.CharField(max_length=200, verbose_name='–ù–∞–∑–≤–∞–Ω–∏–µ (—Ä—É—Å—Å–∫–∏–π)')
    name_kg = models.CharField(max_length=200, verbose_name='–ù–∞–∑–≤–∞–Ω–∏–µ (–∫—ã—Ä–≥—ã–∑—Å–∫–∏–π)')
    name_en = models.CharField(max_length=200, verbose_name='–ù–∞–∑–≤–∞–Ω–∏–µ (–∞–Ω–≥–ª–∏–π—Å–∫–∏–π)')
    
    description_ru = models.TextField(blank=True, verbose_name='–û–ø–∏—Å–∞–Ω–∏–µ (—Ä—É—Å—Å–∫–∏–π)')
    description_kg = models.TextField(blank=True, verbose_name='–û–ø–∏—Å–∞–Ω–∏–µ (–∫—ã—Ä–≥—ã–∑—Å–∫–∏–π)')
    description_en = models.TextField(blank=True, verbose_name='–û–ø–∏—Å–∞–Ω–∏–µ (–∞–Ω–≥–ª–∏–π—Å–∫–∏–π)')
    
    # –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    website = models.URLField(blank=True, null=True, verbose_name='–í–µ–±-—Å–∞–π—Ç')
    email = models.EmailField(blank=True, null=True, verbose_name='Email')
    phone = models.CharField(max_length=20, blank=True, verbose_name='–¢–µ–ª–µ—Ñ–æ–Ω')
    
    # –õ–æ–≥–æ—Ç–∏–ø –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    logo = models.ImageField(upload_to='media_outlets/logos/', blank=True, null=True, verbose_name='–õ–æ–≥–æ—Ç–∏–ø')
    logo_url = models.URLField(blank=True, null=True, verbose_name='URL –ª–æ–≥–æ—Ç–∏–ø–∞')
    
    # –ö–∞—Ç–µ–≥–æ—Ä–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    default_category = models.ForeignKey(MediaCategory, on_delete=models.SET_NULL, null=True, blank=True, verbose_name='–ö–∞—Ç–µ–≥–æ—Ä–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é')
    
    # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    created_at = models.DateTimeField(auto_now_add=True, verbose_name='–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è')
    updated_at = models.DateTimeField(auto_now=True, verbose_name='–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è')
    is_active = models.BooleanField(default=True, verbose_name='–ê–∫—Ç–∏–≤–Ω–æ')
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_articles = models.PositiveIntegerField(default=0, verbose_name='–í—Å–µ–≥–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–π')
    
    class Meta:
        verbose_name = '–ú–µ–¥–∏–∞-–∏–∑–¥–∞–Ω–∏–µ'
        verbose_name_plural = '–ú–µ–¥–∏–∞-–∏–∑–¥–∞–Ω–∏—è'
        ordering = ['name_ru']
    
    def __str__(self):
        return self.name_ru or self.name
    
    @property
    def logo_url_or_default(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç URL –ª–æ–≥–æ—Ç–∏–ø–∞ –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π URL"""
        if self.logo:
            return self.logo.url
        elif self.logo_url:
            return self.logo_url
        return None


class MediaArticle(models.Model):
    """–û—Å–Ω–æ–≤–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –º–µ–¥–∏–∞-–ø—É–±–ª–∏–∫–∞—Ü–∏–π"""
    
    # –ú—É–ª—å—Ç–∏—è–∑—ã—á–Ω—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –ø–æ–ª—è
    title_ru = models.CharField(max_length=300, verbose_name='–ó–∞–≥–æ–ª–æ–≤–æ–∫ (—Ä—É—Å—Å–∫–∏–π)')
    title_kg = models.CharField(max_length=300, verbose_name='–ó–∞–≥–æ–ª–æ–≤–æ–∫ (–∫—ã—Ä–≥—ã–∑—Å–∫–∏–π)')
    title_en = models.CharField(max_length=300, verbose_name='–ó–∞–≥–æ–ª–æ–≤–æ–∫ (–∞–Ω–≥–ª–∏–π—Å–∫–∏–π)')
    
    slug = models.SlugField(max_length=300, unique=True, verbose_name='URL slug')
    
    description_ru = models.TextField(max_length=1000, verbose_name='–û–ø–∏—Å–∞–Ω–∏–µ (—Ä—É—Å—Å–∫–∏–π)')
    description_kg = models.TextField(max_length=1000, verbose_name='–û–ø–∏—Å–∞–Ω–∏–µ (–∫—ã—Ä–≥—ã–∑—Å–∫–∏–π)')
    description_en = models.TextField(max_length=1000, verbose_name='–û–ø–∏—Å–∞–Ω–∏–µ (–∞–Ω–≥–ª–∏–π—Å–∫–∏–π)')
    
    # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –ø–æ–ª–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ
    content_ru = models.TextField(blank=True, verbose_name='–ü–æ–ª–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ (—Ä—É—Å—Å–∫–∏–π)')
    content_kg = models.TextField(blank=True, verbose_name='–ü–æ–ª–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ (–∫—ã—Ä–≥—ã–∑—Å–∫–∏–π)')
    content_en = models.TextField(blank=True, verbose_name='–ü–æ–ª–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ (–∞–Ω–≥–ª–∏–π—Å–∫–∏–π)')
    
    # –°–≤—è–∑–∏
    category = models.ForeignKey(MediaCategory, on_delete=models.CASCADE, verbose_name='–ö–∞—Ç–µ–≥–æ—Ä–∏—è')
    outlet = models.ForeignKey(MediaOutlet, on_delete=models.CASCADE, verbose_name='–ò–∑–¥–∞–Ω–∏–µ')
    
    # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    image = models.ImageField(upload_to='media_coverage/images/', blank=True, null=True, verbose_name='–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ')
    image_url = models.URLField(blank=True, null=True, verbose_name='URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è')
    
    # –°—Å—ã–ª–∫–∏
    original_url = models.URLField(verbose_name='–°—Å—ã–ª–∫–∞ –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª')
    archive_url = models.URLField(blank=True, null=True, verbose_name='–ê—Ä—Ö–∏–≤–Ω–∞—è —Å—Å—ã–ª–∫–∞')
    official_site_url = models.URLField(blank=True, null=True, verbose_name='–°—Å—ã–ª–∫–∞ –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç')
    
    # –ê–≤—Ç–æ—Ä/–∂—É—Ä–Ω–∞–ª–∏—Å—Ç
    author_ru = models.CharField(max_length=200, blank=True, verbose_name='–ê–≤—Ç–æ—Ä (—Ä—É—Å—Å–∫–∏–π)')
    author_kg = models.CharField(max_length=200, blank=True, verbose_name='–ê–≤—Ç–æ—Ä (–∫—ã—Ä–≥—ã–∑—Å–∫–∏–π)')
    author_en = models.CharField(max_length=200, blank=True, verbose_name='–ê–≤—Ç–æ—Ä (–∞–Ω–≥–ª–∏–π—Å–∫–∏–π)')
    
    journalist_name = models.CharField(max_length=200, blank=True, verbose_name='–ò–º—è –∂—É—Ä–Ω–∞–ª–∏—Å—Ç–∞')
    journalist_email = models.EmailField(blank=True, null=True, verbose_name='Email –∂—É—Ä–Ω–∞–ª–∏—Å—Ç–∞')
    
    # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ–ª—è
    publication_date = models.DateField(verbose_name='–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏')
    created_at = models.DateTimeField(auto_now_add=True, verbose_name='–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è')
    updated_at = models.DateTimeField(auto_now=True, verbose_name='–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è')
    
    # –°—Ç–∞—Ç—É—Å –∏ –º–æ–¥–µ—Ä–∞—Ü–∏—è
    is_published = models.BooleanField(default=True, verbose_name='–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ')
    is_featured = models.BooleanField(default=False, verbose_name='–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ')
    is_verified = models.BooleanField(default=False, verbose_name='–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ')
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ —Ä–µ–π—Ç–∏–Ω–≥
    views_count = models.PositiveIntegerField(default=0, verbose_name='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤')
    importance_score = models.PositiveIntegerField(
        default=1, 
        help_text='–û—Ü–µ–Ω–∫–∞ –≤–∞–∂–Ω–æ—Å—Ç–∏ –æ—Ç 1 –¥–æ 10',
        verbose_name='–û—Ü–µ–Ω–∫–∞ –≤–∞–∂–Ω–æ—Å—Ç–∏'
    )
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    reach_estimate = models.PositiveIntegerField(blank=True, null=True, verbose_name='–û—Ü–µ–Ω–æ—á–Ω—ã–π –æ—Ö–≤–∞—Ç')
    sentiment = models.CharField(
        max_length=20,
        choices=[
            ('positive', '–ü–æ–∑–∏—Ç–∏–≤–Ω–æ–µ'),
            ('neutral', '–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ'),
            ('negative', '–ù–µ–≥–∞—Ç–∏–≤–Ω–æ–µ')
        ],
        default='neutral',
        verbose_name='–¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å'
    )
    
    # –¢–µ–≥–∏ –∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
    keywords = models.TextField(blank=True, help_text='–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é', verbose_name='–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞')
    
    class Meta:
        verbose_name = '–ú–µ–¥–∏–∞-–ø—É–±–ª–∏–∫–∞—Ü–∏—è'
        verbose_name_plural = '–ú–µ–¥–∏–∞-–ø—É–±–ª–∏–∫–∞—Ü–∏–∏'
        ordering = ['-publication_date', '-created_at']
        unique_together = ['outlet', 'slug']
    
    def __str__(self):
        return f"{self.title_ru} - {self.outlet.name_ru}"
    
    @property
    def image_url_or_default(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π URL"""
        if self.image:
            return self.image.url
        elif self.image_url:
            return self.image_url
        return None
    
    def save(self, *args, **kwargs):
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —Å—Ç–∞—Ç–µ–π —É –∏–∑–¥–∞–Ω–∏—è
        is_new = self.pk is None
        super().save(*args, **kwargs)
        
        if is_new and self.is_published:
            self.outlet.total_articles += 1
            self.outlet.save(update_fields=['total_articles'])
    
    def delete(self, *args, **kwargs):
        # –£–º–µ–Ω—å—à–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Å—Ç–∞—Ç–µ–π —É –∏–∑–¥–∞–Ω–∏—è
        if self.is_published:
            self.outlet.total_articles = max(0, self.outlet.total_articles - 1)
            self.outlet.save(update_fields=['total_articles'])
        super().delete(*args, **kwargs)


class MediaTag(models.Model):
    """–¢–µ–≥–∏ –¥–ª—è –º–µ–¥–∏–∞-–ø—É–±–ª–∏–∫–∞—Ü–∏–π"""
    name_ru = models.CharField(max_length=50, verbose_name='–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–≥–∞ (—Ä—É—Å—Å–∫–∏–π)')
    name_kg = models.CharField(max_length=50, verbose_name='–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–≥–∞ (–∫—ã—Ä–≥—ã–∑—Å–∫–∏–π)')
    name_en = models.CharField(max_length=50, verbose_name='–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–≥–∞ (–∞–Ω–≥–ª–∏–π—Å–∫–∏–π)')
    slug = models.SlugField(max_length=50, unique=True, verbose_name='URL slug')
    color = models.CharField(max_length=7, default='#3B82F6', verbose_name='–¶–≤–µ—Ç (hex)')
    
    # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    created_at = models.DateTimeField(auto_now_add=True, verbose_name='–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è')
    is_active = models.BooleanField(default=True, verbose_name='–ê–∫—Ç–∏–≤–µ–Ω')
    usage_count = models.PositiveIntegerField(default=0, verbose_name='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π')
    
    class Meta:
        verbose_name = '–¢–µ–≥ –º–µ–¥–∏–∞-–ø—É–±–ª–∏–∫–∞—Ü–∏–∏'
        verbose_name_plural = '–¢–µ–≥–∏ –º–µ–¥–∏–∞-–ø—É–±–ª–∏–∫–∞—Ü–∏–π'
        ordering = ['name_ru']
    
    def __str__(self):
        return self.name_ru


class MediaArticleTag(models.Model):
    """–°–≤—è–∑—å –º–µ–∂–¥—É –º–µ–¥–∏–∞-–ø—É–±–ª–∏–∫–∞—Ü–∏—è–º–∏ –∏ —Ç–µ–≥–∞–º–∏"""
    article = models.ForeignKey(MediaArticle, on_delete=models.CASCADE, related_name='tags')
    tag = models.ForeignKey(MediaTag, on_delete=models.CASCADE, related_name='articles')
    created_at = models.DateTimeField(auto_now_add=True, verbose_name='–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è')
    
    class Meta:
        unique_together = ['article', 'tag']
        verbose_name = '–°–≤—è–∑—å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å —Ç–µ–≥–æ–º'
        verbose_name_plural = '–°–≤—è–∑–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–π —Å —Ç–µ–≥–∞–º–∏'
    
    def save(self, *args, **kwargs):
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–µ–≥–∞
        is_new = self.pk is None
        super().save(*args, **kwargs)
        
        if is_new:
            self.tag.usage_count += 1
            self.tag.save(update_fields=['usage_count'])
    
    def delete(self, *args, **kwargs):
        # –£–º–µ–Ω—å—à–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–µ–≥–∞
        self.tag.usage_count = max(0, self.tag.usage_count - 1)
        self.tag.save(update_fields=['usage_count'])
        super().delete(*args, **kwargs)


class MediaView(models.Model):
    """–ú–æ–¥–µ–ª—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –º–µ–¥–∏–∞-–ø—É–±–ª–∏–∫–∞—Ü–∏–π"""
    article = models.ForeignKey(MediaArticle, on_delete=models.CASCADE, related_name='article_views')
    ip_address = models.GenericIPAddressField(verbose_name='IP –∞–¥—Ä–µ—Å')
    user_agent = models.TextField(blank=True, verbose_name='User Agent')
    viewed_at = models.DateTimeField(auto_now_add=True, verbose_name='–î–∞—Ç–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞')
    
    class Meta:
        verbose_name = '–ü—Ä–æ—Å–º–æ—Ç—Ä –º–µ–¥–∏–∞-–ø—É–±–ª–∏–∫–∞—Ü–∏–∏'
        verbose_name_plural = '–ü—Ä–æ—Å–º–æ—Ç—Ä—ã –º–µ–¥–∏–∞-–ø—É–±–ª–∏–∫–∞—Ü–∏–π'
        unique_together = ['article', 'ip_address']  # –û–¥–∏–Ω –ø—Ä–æ—Å–º–æ—Ç—Ä —Å –æ–¥–Ω–æ–≥–æ IP


class MediaStatistics(models.Model):
    """–ê–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–µ–¥–∏–∞-–ø—É–±–ª–∏–∫–∞—Ü–∏—è–º"""
    date = models.DateField(verbose_name='–î–∞—Ç–∞')
    
    # –°—á–µ—Ç—á–∏–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    tv_articles = models.PositiveIntegerField(default=0, verbose_name='–¢–í —Å—é–∂–µ—Ç—ã')
    newspaper_articles = models.PositiveIntegerField(default=0, verbose_name='–°—Ç–∞—Ç—å–∏ –≤ –ø—Ä–µ—Å—Å–µ')
    online_articles = models.PositiveIntegerField(default=0, verbose_name='–û–Ω–ª–∞–π–Ω –ø—É–±–ª–∏–∫–∞—Ü–∏–∏')
    radio_articles = models.PositiveIntegerField(default=0, verbose_name='–†–∞–¥–∏–æ –∏–Ω—Ç–µ—Ä–≤—å—é')
    magazine_articles = models.PositiveIntegerField(default=0, verbose_name='–ñ—É—Ä–Ω–∞–ª—å–Ω—ã–µ —Å—Ç–∞—Ç—å–∏')
    
    # –û–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
    total_articles = models.PositiveIntegerField(default=0, verbose_name='–í—Å–µ–≥–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–π')
    total_views = models.PositiveIntegerField(default=0, verbose_name='–í—Å–µ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤')
    total_reach = models.PositiveIntegerField(default=0, verbose_name='–û–±—â–∏–π –æ—Ö–≤–∞—Ç')
    
    # –ê–Ω–∞–ª–∏–∑ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
    positive_articles = models.PositiveIntegerField(default=0, verbose_name='–ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏')
    neutral_articles = models.PositiveIntegerField(default=0, verbose_name='–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏')
    negative_articles = models.PositiveIntegerField(default=0, verbose_name='–ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏')
    
    created_at = models.DateTimeField(auto_now_add=True, verbose_name='–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è')
    updated_at = models.DateTimeField(auto_now=True, verbose_name='–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è')
    
    class Meta:
        verbose_name = '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–µ–¥–∏–∞'
        verbose_name_plural = '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–µ–¥–∏–∞'
        unique_together = ['date']
        ordering = ['-date']
    
    def __str__(self):
        return f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {self.date}: {self.total_articles} –ø—É–±–ª–∏–∫–∞—Ü–∏–π"
