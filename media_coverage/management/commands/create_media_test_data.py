from django.core.management.base import BaseCommand
from django.utils import timezone
from datetime import datetime, timedelta
import random
from media_coverage.models import (
    MediaCategory, MediaOutlet, MediaArticle, 
    MediaTag, MediaArticleTag, MediaStatistics
)


class Command(BaseCommand):
    help = '–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–µ–¥–∏–∞-–ø–æ–∫—Ä—ã—Ç–∏—è'

    def add_arguments(self, parser):
        parser.add_argument(
            '--articles',
            type=int,
            default=50,
            help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞—Ç–µ–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 50)',
        )

    def handle(self, *args, **options):
        self.stdout.write('–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–µ–¥–∏–∞-–ø–æ–∫—Ä—ã—Ç–∏—è...')
        
        # –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        self.create_categories()
        
        # –°–æ–∑–¥–∞–µ–º –º–µ–¥–∏–∞-–∏–∑–¥–∞–Ω–∏—è
        self.create_outlets()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ–≥–∏
        self.create_tags()
        
        # –°–æ–∑–¥–∞–µ–º –º–µ–¥–∏–∞-–ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        self.create_articles(options['articles'])
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.create_statistics()
        
        self.stdout.write(
            self.style.SUCCESS('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–µ–¥–∏–∞-–ø–æ–∫—Ä—ã—Ç–∏—è —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!')
        )

    def create_categories(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –º–µ–¥–∏–∞"""
        categories_data = [
            {
                'name': MediaCategory.TV,
                'slug': 'tv',
                'icon': 'üì∫',
                'name_ru': '–¢–µ–ª–µ–≤–∏–¥–µ–Ω–∏–µ',
                'name_kg': '–¢–µ–ª–µ–≤–∏–¥–µ–Ω–∏–µ',
                'name_en': 'Television',
                'description_ru': '–¢–µ–ª–µ–≤–∏–∑–∏–æ–Ω–Ω—ã–µ —Å—é–∂–µ—Ç—ã –∏ –∏–Ω—Ç–µ—Ä–≤—å—é',
                'description_kg': '–¢–µ–ª–µ–≤–∏–∑–∏—è–ª—ã–∫ —Å—é–∂–µ—Ç—Ç–µ—Ä –∂–∞–Ω–∞ –∏–Ω—Ç–µ—Ä–≤—å—é–ª–∞—Ä',
                'description_en': 'Television stories and interviews'
            },
            {
                'name': MediaCategory.NEWSPAPER,
                'slug': 'newspaper',
                'icon': 'üì∞',
                'name_ru': '–ì–∞–∑–µ—Ç—ã',
                'name_kg': '–ì–µ–∑–∏—Ç—Ç–µ—Ä',
                'name_en': 'Newspapers',
                'description_ru': '–ü—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –ø–µ—á–∞—Ç–Ω—ã—Ö –∏–∑–¥–∞–Ω–∏—è—Ö',
                'description_kg': '–ë–∞—Å—ã–ª–º–∞ –±–∞—Å–º–∞–ª–∞—Ä–¥–∞ —á—ã–∫–∫–∞–Ω –º–∞–∫–∞–ª–∞–ª–∞—Ä',
                'description_en': 'Print media publications'
            },
            {
                'name': MediaCategory.ONLINE,
                'slug': 'online',
                'icon': 'üíª',
                'name_ru': '–ò–Ω—Ç–µ—Ä–Ω–µ—Ç',
                'name_kg': '–ò–Ω—Ç–µ—Ä–Ω–µ—Ç',
                'name_en': 'Online',
                'description_ru': '–û–Ω–ª–∞–π–Ω-–ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∏ –Ω–æ–≤–æ—Å—Ç–Ω—ã–µ —Å–∞–π—Ç—ã',
                'description_kg': '–û–Ω–ª–∞–π–Ω –±–∞—Å—ã–ª–º–∞–ª–∞—Ä –∂–∞–Ω–∞ –∂–∞“£—ã–ª—ã–∫ —Å–∞–π—Ç—Ç–∞—Ä—ã',
                'description_en': 'Online publications and news websites'
            },
            {
                'name': MediaCategory.RADIO,
                'slug': 'radio',
                'icon': 'üìª',
                'name_ru': '–†–∞–¥–∏–æ',
                'name_kg': '–†–∞–¥–∏–æ',
                'name_en': 'Radio',
                'description_ru': '–†–∞–¥–∏–æ–∏–Ω—Ç–µ—Ä–≤—å—é –∏ –ø–µ—Ä–µ–¥–∞—á–∏',
                'description_kg': '–†–∞–¥–∏–æ –∏–Ω—Ç–µ—Ä–≤—å—é–ª–∞—Ä –∂–∞–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∞–ª–∞—Ä',
                'description_en': 'Radio interviews and programs'
            },
            {
                'name': MediaCategory.MAGAZINE,
                'slug': 'magazine',
                'icon': 'üìñ',
                'name_ru': '–ñ—É—Ä–Ω–∞–ª—ã',
                'name_kg': '–ñ—É—Ä–Ω–∞–ª–¥–∞—Ä',
                'name_en': 'Magazines',
                'description_ru': '–ü—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –∂—É—Ä–Ω–∞–ª–∞—Ö',
                'description_kg': '–ñ—É—Ä–Ω–∞–ª–¥–∞—Ä–¥–∞ —á—ã–∫–∫–∞–Ω –º–∞–∫–∞–ª–∞–ª–∞—Ä',
                'description_en': 'Magazine publications'
            }
        ]
        
        for cat_data in categories_data:
            category, created = MediaCategory.objects.get_or_create(
                name=cat_data['name'],
                defaults=cat_data
            )
            if created:
                self.stdout.write(f'–°–æ–∑–¥–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category.name_ru}')

    def create_outlets(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –º–µ–¥–∏–∞-–∏–∑–¥–∞–Ω–∏–π"""
        outlets_data = [
            {
                'name': 'ktrk',
                'slug': 'ktrk',
                'name_ru': '–ö–¢–†–ö',
                'name_kg': '–ö–¢–†–ö',
                'name_en': 'KTRK',
                'website': 'https://ktrk.kg',
                'default_category': MediaCategory.objects.get(name=MediaCategory.TV)
            },
            {
                'name': 'akipress',
                'slug': 'akipress',
                'name_ru': 'AKIpress',
                'name_kg': 'AKIpress',
                'name_en': 'AKIpress',
                'website': 'https://akipress.kg',
                'default_category': MediaCategory.objects.get(name=MediaCategory.ONLINE)
            },
            {
                'name': 'slovo-kg',
                'slug': 'slovo-kg',
                'name_ru': '–°–ª–æ–≤–æ –ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω–∞',
                'name_kg': '–ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω –°”©–∑“Ø',
                'name_en': 'Slovo Kyrgyzstana',
                'website': 'https://slovo.kg',
                'default_category': MediaCategory.objects.get(name=MediaCategory.NEWSPAPER)
            },
            {
                'name': 'kabar',
                'slug': 'kabar',
                'name_ru': '–ö–∞–±–∞—Ä',
                'name_kg': '–ö–∞–±–∞—Ä',
                'name_en': 'Kabar',
                'website': 'https://kabar.kg',
                'default_category': MediaCategory.objects.get(name=MediaCategory.ONLINE)
            },
            {
                'name': 'vesti-kg',
                'slug': 'vesti-kg',
                'name_ru': '–í–µ—Å—Ç–∏.kg',
                'name_kg': '–í–µ—Å—Ç–∏.kg',
                'name_en': 'Vesti.kg',
                'website': 'https://vesti.kg',
                'default_category': MediaCategory.objects.get(name=MediaCategory.ONLINE)
            },
            {
                'name': 'delo-kg',
                'slug': 'delo-kg',
                'name_ru': '–î–µ–ª–æ ‚Ññ',
                'name_kg': '–î–µ–ª–æ ‚Ññ',
                'name_en': 'Delo ‚Ññ',
                'website': 'https://delo.kg',
                'default_category': MediaCategory.objects.get(name=MediaCategory.NEWSPAPER)
            }
        ]
        
        for outlet_data in outlets_data:
            outlet, created = MediaOutlet.objects.get_or_create(
                name=outlet_data['name'],
                defaults=outlet_data
            )
            if created:
                self.stdout.write(f'–°–æ–∑–¥–∞–Ω–æ –∏–∑–¥–∞–Ω–∏–µ: {outlet.name_ru}')

    def create_tags(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–≥–æ–≤"""
        tags_data = [
            {
                'slug': 'medicina',
                'name_ru': '–ú–µ–¥–∏—Ü–∏–Ω–∞',
                'name_kg': '–ú–µ–¥–∏—Ü–∏–Ω–∞',
                'name_en': 'Medicine',
                'color': '#E53E3E'
            },
            {
                'slug': 'obrazovanie',
                'name_ru': '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ',
                'name_kg': '–ë–∏–ª–∏–º –±–µ—Ä“Ø“Ø',
                'name_en': 'Education',
                'color': '#3182CE'
            },
            {
                'slug': 'nauka',
                'name_ru': '–ù–∞—É–∫–∞',
                'name_kg': '–ò–ª–∏–º',
                'name_en': 'Science',
                'color': '#805AD5'
            },
            {
                'slug': 'studenty',
                'name_ru': '–°—Ç—É–¥–µ–Ω—Ç—ã',
                'name_kg': '–°—Ç—É–¥–µ–Ω—Ç—Ç–µ—Ä',
                'name_en': 'Students',
                'color': '#38A169'
            },
            {
                'slug': 'universitet',
                'name_ru': '–£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç',
                'name_kg': '–£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç',
                'name_en': 'University',
                'color': '#D69E2E'
            },
            {
                'slug': 'praktika',
                'name_ru': '–ü—Ä–∞–∫—Ç–∏–∫–∞',
                'name_kg': '–ü—Ä–∞–∫—Ç–∏–∫–∞',
                'name_en': 'Practice',
                'color': '#319795'
            },
            {
                'slug': 'mezhdunarodnoye-sotrudnichestvo',
                'name_ru': '–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–µ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ',
                'name_kg': '–≠–ª –∞—Ä–∞–ª—ã–∫ –∫—ã–∑–º–∞—Ç—Ç–∞—à—É—É',
                'name_en': 'International Cooperation',
                'color': '#E53E3E'
            },
            {
                'slug': 'konferentsii',
                'name_ru': '–ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏',
                'name_kg': '–ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è–ª–∞—Ä',
                'name_en': 'Conferences',
                'color': '#9F7AEA'
            }
        ]
        
        for tag_data in tags_data:
            tag, created = MediaTag.objects.get_or_create(
                slug=tag_data['slug'],
                defaults=tag_data
            )
            if created:
                self.stdout.write(f'–°–æ–∑–¥–∞–Ω —Ç–µ–≥: {tag.name_ru}')

    def create_articles(self, count=50):
        """–°–æ–∑–¥–∞–Ω–∏–µ –º–µ–¥–∏–∞-–ø—É–±–ª–∏–∫–∞—Ü–∏–π"""
        categories = list(MediaCategory.objects.all())
        outlets = list(MediaOutlet.objects.all())
        tags = list(MediaTag.objects.all())
        
        sentiments = ['positive', 'neutral', 'negative']
        
        articles_data = [
            {
                'title_base': '–°–∞–ª—ã–º–±–µ–∫–æ–≤—Å–∫–∏–π —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç –ø—Ä–æ–≤–æ–¥–∏—Ç –º–µ–¥–∏—Ü–∏–Ω—Å–∫—É—é –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—é',
                'title_kg': '–°–∞–ª—ã–º–±–µ–∫ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∏ –º–µ–¥–∏—Ü–∏–Ω–∞–ª—ã–∫ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è ”©—Ç–∫”©—Ä”©—Ç',
                'title_en': 'Salymbekov University holds medical conference',
                'content_base': '–í –°–∞–ª—ã–º–±–µ–∫–æ–≤—Å–∫–æ–º —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–µ –ø—Ä–æ—à–ª–∞ –∫—Ä—É–ø–Ω–∞—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è, –ø–æ—Å–≤—è—â–µ–Ω–Ω–∞—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º –º–µ—Ç–æ–¥–∞–º –ª–µ—á–µ–Ω–∏—è.',
            },
            {
                'title_base': '–°—Ç—É–¥–µ–Ω—Ç—ã –°–£ –∑–∞–≤–æ–µ–≤–∞–ª–∏ –ø–µ—Ä–≤–æ–µ –º–µ—Å—Ç–æ –≤ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π –æ–ª–∏–º–ø–∏–∞–¥–µ',
                'title_kg': '–°–£ —Å—Ç—É–¥–µ–Ω—Ç—Ç–µ—Ä–∏ –º–µ–¥–∏—Ü–∏–Ω–∞–ª—ã–∫ –æ–ª–∏–º–ø–∏–∞–¥–∞–¥–∞ –±–∏—Ä–∏–Ω—á–∏ –æ—Ä—É–Ω–¥—É —ç—ç–ª–µ–¥–∏',
                'title_en': 'SU students won first place in medical olympiad',
                'content_base': '–ö–æ–º–∞–Ω–¥–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –°–∞–ª—ã–º–±–µ–∫–æ–≤—Å–∫–æ–≥–æ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞ –ø–æ–∫–∞–∑–∞–ª–∞ –æ—Ç–ª–∏—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞ —Ä–µ—Å–ø—É–±–ª–∏–∫–∞–Ω—Å–∫–æ–π –æ–ª–∏–º–ø–∏–∞–¥–µ.',
            },
            {
                'title_base': '–ù–æ–≤–æ–µ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–µ –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–æ –°–£ —Å –µ–≤—Ä–æ–ø–µ–π—Å–∫–∏–º–∏ –≤—É–∑–∞–º–∏',
                'title_kg': '–°–£–Ω—É–Ω –µ–≤—Ä–æ–ø–∞–ª—ã–∫ –∂–æ–≥–æ—Ä–∫—É –æ–∫—É—É –∂–∞–π–ª–∞—Ä—ã –º–µ–Ω–µ–Ω –∂–∞“£—ã —ç–ª –∞—Ä–∞–ª—ã–∫ ”©–Ω”©–∫—Ç”©—à—Ç“Ø–≥“Ø',
                'title_en': 'New international partnership of SU with European universities',
                'content_base': '–°–∞–ª—ã–º–±–µ–∫–æ–≤—Å–∫–∏–π —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç –ø–æ–¥–ø–∏—Å–∞–ª —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ –æ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–µ —Å –≤–µ–¥—É—â–∏–º–∏ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–º–∏ –≤—É–∑–∞–º–∏ –ï–≤—Ä–æ–ø—ã.',
            },
            {
                'title_base': '–û—Ç–∫—Ä—ã—Ç–∏–µ –Ω–æ–≤–æ–≥–æ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∞ –ø—Ä–∏ –°–£',
                'title_kg': '–°–£–¥–∞–≥—ã –∂–∞“£—ã –º–µ–¥–∏—Ü–∏–Ω–∞–ª—ã–∫ –±–æ—Ä–±–æ—Ä—É–Ω—É–Ω –∞—á—ã–ª—ã—à—ã',
                'title_en': 'Opening of a new medical center at SU',
                'content_base': '–í –°–∞–ª—ã–º–±–µ–∫–æ–≤—Å–∫–æ–º —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–µ –æ—Ç–∫—Ä—ã–ª—Å—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π —Ü–µ–Ω—Ç—Ä —Å –Ω–æ–≤–µ–π—à–∏–º –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ–º.',
            },
            {
                'title_base': '–í—ã–ø—É—Å–∫–Ω–∏–∫–∏ –°–£ —É—Å–ø–µ—à–Ω–æ —Ä–∞–±–æ—Ç–∞—é—Ç –≤ –≤–µ–¥—É—â–∏—Ö –∫–ª–∏–Ω–∏–∫–∞—Ö',
                'title_kg': '–°–£ –±“Ø—Ç“Ø—Ä“Ø“Ø—á“Ø–ª”©—Ä“Ø –∂–µ—Ç–µ–∫—Ç“Ø“Ø –∫–ª–∏–Ω–∏–∫–∞–ª–∞—Ä–¥–∞ –∏–π–≥–∏–ª–∏–∫—Ç“Ø“Ø –∏—à—Ç–µ–ø –∂–∞—Ç—ã—à–∞—Ç',
                'title_en': 'SU graduates successfully work in leading clinics',
                'content_base': '–í—ã–ø—É—Å–∫–Ω–∏–∫–∏ –°–∞–ª—ã–º–±–µ–∫–æ–≤—Å–∫–æ–≥–æ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–µ–Ω—ã –≤ –ª—É—á—à–∏—Ö –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö —É—á—Ä–µ–∂–¥–µ–Ω–∏—è—Ö —Å—Ç—Ä–∞–Ω—ã.',
            }
        ]
        
        for i in range(count):
            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            template = random.choice(articles_data)
            category = random.choice(categories)
            outlet = random.choice(outlets)
            sentiment = random.choice(sentiments)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞—Ç—É –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 6 –º–µ—Å—è—Ü–µ–≤
            days_ago = random.randint(0, 180)
            pub_date = timezone.now().date() - timedelta(days=days_ago)
            
            article_data = {
                'title_ru': f"{template['title_base']} - {i+1}",
                'title_kg': f"{template['title_kg']} - {i+1}",
                'title_en': f"{template['title_en']} - {i+1}",
                'slug': f"media-article-{i+1}",
                'description_ru': f"–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ–¥–∏–∞-–ø—É–±–ª–∏–∫–∞—Ü–∏–∏ {i+1}. {template['content_base'][:100]}...",
                'description_kg': f"–ú–µ–¥–∏–∞ –±–∞—Å—ã–ª–º–∞–Ω—ã–Ω {i+1} –∫—ã—Å–∫–∞—á–∞ –±–∞—è–Ω–¥–∞–º–∞—Å—ã...",
                'description_en': f"Brief description of media publication {i+1}...",
                'content_ru': f"–ü–æ–ª–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ {i+1}. {template['content_base']} " * 3,
                'content_kg': f"–ë–∞—Å—ã–ª–º–∞–Ω—ã–Ω {i+1} —Ç–æ–ª—É–∫ –º–∞–∑–º—É–Ω—É...",
                'content_en': f"Full content of publication {i+1}...",
                'category': category,
                'outlet': outlet,
                'original_url': f"https://{outlet.website.replace('https://', '')}/news/article-{i+1}",
                'official_site_url': f"https://salymbekov-university.edu.kg/news/article-{i+1}" if random.choice([True, False, False]) else None,
                'publication_date': pub_date,
                'importance_score': random.randint(1, 10),
                'sentiment': sentiment,
                'views_count': random.randint(0, 1000),
                'is_published': True,
                'is_featured': random.choice([True, False]) if i < 10 else False,
                'is_verified': random.choice([True, False]),
                'reach_estimate': random.randint(1000, 50000),
                'keywords': '–°–∞–ª—ã–º–±–µ–∫–æ–≤—Å–∫–∏–π —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç, –º–µ–¥–∏—Ü–∏–Ω–∞, –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ, —Å—Ç—É–¥–µ–Ω—Ç—ã',
                'journalist_name': random.choice([
                    '–ê–π–≥—É–ª—å –ê—Å–∞–Ω–æ–≤–∞', '–ë–∞–∫—ã—Ç –¢–æ–∫—Ç–æ–≥—É–ª–æ–≤', '–í–∏–∫—Ç–æ—Ä–∏—è –ü–µ—Ç—Ä–æ–≤–∞',
                    '–î–∞–Ω–∏—è—Ä –°–º–∞–Ω–æ–≤', '–ï–ª–µ–Ω–∞ –ò–≤–∞–Ω–æ–≤–∞', '–ñ–∞–º–∏–ª–∞ –û–º—É—Ä–±–µ–∫–æ–≤–∞'
                ]),
                'author_ru': random.choice([
                    '–ö–æ—Ä—Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç', '–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∫–æ—Ä—Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç', '–†–µ–¥–∞–∫—Ü–∏—è'
                ]),
                'author_kg': random.choice([
                    '–ö–æ—Ä—Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç', '–ê—Ç–∞–π—ã–Ω –∫–æ—Ä—Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç', '–†–µ–¥–∞–∫—Ü–∏—è'
                ]),
                'author_en': random.choice([
                    'Correspondent', 'Special Correspondent', 'Editorial'
                ])
            }
            
            article, created = MediaArticle.objects.get_or_create(
                slug=article_data['slug'],
                defaults=article_data
            )
            
            if created:
                # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —Ç–µ–≥–∏
                article_tags = random.sample(tags, random.randint(1, 3))
                for tag in article_tags:
                    MediaArticleTag.objects.get_or_create(
                        article=article,
                        tag=tag
                    )
                
                self.stdout.write(f'–°–æ–∑–¥–∞–Ω–∞ —Å—Ç–∞—Ç—å—è: {article.title_ru}')

    def create_statistics(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        # –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
        for days_ago in range(30):
            date = timezone.now().date() - timedelta(days=days_ago)
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å
            articles_on_date = MediaArticle.objects.filter(
                publication_date=date,
                is_published=True
            )
            
            if articles_on_date.exists():
                total_articles = articles_on_date.count()
                
                # –ü–æ–¥—Å—á–µ—Ç –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
                tv_articles = articles_on_date.filter(category__name=MediaCategory.TV).count()
                newspaper_articles = articles_on_date.filter(category__name=MediaCategory.NEWSPAPER).count()
                online_articles = articles_on_date.filter(category__name=MediaCategory.ONLINE).count()
                radio_articles = articles_on_date.filter(category__name=MediaCategory.RADIO).count()
                magazine_articles = articles_on_date.filter(category__name=MediaCategory.MAGAZINE).count()
                
                # –ü–æ–¥—Å—á–µ—Ç –ø–æ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
                positive_articles = articles_on_date.filter(sentiment='positive').count()
                neutral_articles = articles_on_date.filter(sentiment='neutral').count()
                negative_articles = articles_on_date.filter(sentiment='negative').count()
                
                # –û–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
                total_views = sum([article.views_count for article in articles_on_date])
                total_reach = sum([article.reach_estimate or 0 for article in articles_on_date])
                
                # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                stats, created = MediaStatistics.objects.get_or_create(
                    date=date,
                    defaults={
                        'tv_articles': tv_articles,
                        'newspaper_articles': newspaper_articles,
                        'online_articles': online_articles,
                        'radio_articles': radio_articles,
                        'magazine_articles': magazine_articles,
                        'total_articles': total_articles,
                        'total_views': total_views,
                        'total_reach': total_reach,
                        'positive_articles': positive_articles,
                        'neutral_articles': neutral_articles,
                        'negative_articles': negative_articles
                    }
                )
                
                if created:
                    self.stdout.write(f'–°–æ–∑–¥–∞–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {date}: {total_articles} —Å—Ç–∞—Ç–µ–π')
