#!/usr/bin/env python3
"""
Script to populate infrastructure data for testing the frontend integration
"""

import os
import sys
import django

# Add the project directory to Python path
sys.path.append('/home/adilhan/medicine/SU_back_back')

# Setup Django environment
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'back_su_m.settings')
django.setup()

from infrastructure.models import (
    ClassroomCategory, Classroom, ClassroomEquipment, ClassroomFeature,
    StartupCategory, Startup, StartupTeamMember, StartupInvestor, StartupAchievement
)

def create_classroom_data():
    """Create sample classroom data"""
    print("Creating classroom data...")
    
    # Create classroom categories
    lecture_cat, created = ClassroomCategory.objects.get_or_create(
        name_ru='–õ–µ–∫—Ü–∏–æ–Ω–Ω—ã–µ –∑–∞–ª—ã',
        name_kg='–õ–µ–∫—Ü–∏—è –∑–∞–ª–¥–∞—Ä—ã', 
        name_en='Lecture Halls',
        defaults={'icon': 'üë®‚Äçüè´', 'order': 1}
    )
    
    lab_cat, created = ClassroomCategory.objects.get_or_create(
        name_ru='–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏',
        name_kg='–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è–ª–∞—Ä',
        name_en='Laboratories', 
        defaults={'icon': 'üî¨', 'order': 2}
    )
    
    practice_cat, created = ClassroomCategory.objects.get_or_create(
        name_ru='–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–ª—ã',
        name_kg='–ü—Ä–∞–∫—Ç–∏–∫–∞–ª—ã–∫ –∑–∞–ª–¥–∞—Ä',
        name_en='Practice Rooms',
        defaults={'icon': 'üíä', 'order': 3}
    )
    
    # Create classrooms
    room1, created = Classroom.objects.get_or_create(
        name_ru='–ê—É–¥–∏—Ç–æ—Ä–∏—è 101',
        name_kg='101 –∞—É–¥–∏—Ç–æ—Ä–∏—è',
        name_en='Room 101',
        defaults={
            'category': lecture_cat,
            'description_ru': '–ë–æ–ª—å—à–∞—è –ª–µ–∫—Ü–∏–æ–Ω–Ω–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ–º',
            'description_kg': '–ó–∞–º–∞–Ω–±–∞–ø –∂–∞–±–¥—É—É–ª–∞—Ä –º–µ–Ω–µ–Ω —á–æ“£ –ª–µ–∫—Ü–∏—è –∞—É–¥–∏—Ç–æ—Ä–∏—è—Å—ã',
            'description_en': 'Large lecture hall with modern equipment',
            'capacity': 120,
            'floor': '1',
            'size': 200,
            'image': 'üìä',
            'order': 1
        }
    )
    
    if created:
        # Add equipment
        ClassroomEquipment.objects.create(
            classroom=room1,
            name_ru='–ü—Ä–æ–µ–∫—Ç–æ—Ä',
            name_kg='–ü—Ä–æ–µ–∫—Ç–æ—Ä',
            name_en='Projector'
        )
        ClassroomEquipment.objects.create(
            classroom=room1,
            name_ru='–ó–≤—É–∫–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞',
            name_kg='–î–æ–±—É—à —Å–∏—Å—Ç–µ–º–∞—Å—ã',
            name_en='Sound System'
        )
        
        # Add features
        ClassroomFeature.objects.create(
            classroom=room1,
            name_ru='Wi-Fi',
            name_kg='Wi-Fi',
            name_en='Wi-Fi'
        )
        ClassroomFeature.objects.create(
            classroom=room1,
            name_ru='–ö–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä',
            name_kg='–ö–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä',
            name_en='Air Conditioning'
        )
    
    # Create lab room
    lab_room, created = Classroom.objects.get_or_create(
        name_ru='–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è 201',
        name_kg='201 –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è',
        name_en='Laboratory 201',
        defaults={
            'category': lab_cat,
            'description_ru': '–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è —Å –º–∏–∫—Ä–æ—Å–∫–æ–ø–∞–º–∏ –∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ–º',
            'description_kg': '–ú–∏–∫—Ä–æ—Å–∫–æ–ø—Ç–æ—Ä –∂–∞–Ω–∞ –∂–∞–±–¥—É—É–ª–∞—Ä –º–µ–Ω–µ–Ω –∑–∞–º–∞–Ω–±–∞–ø –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è',
            'description_en': 'Modern laboratory with microscopes and equipment',
            'capacity': 30,
            'floor': '2',
            'size': 80,
            'image': 'üî¨',
            'order': 2
        }
    )
    
    if created:
        ClassroomEquipment.objects.create(
            classroom=lab_room,
            name_ru='–ú–∏–∫—Ä–æ—Å–∫–æ–ø—ã',
            name_kg='–ú–∏–∫—Ä–æ—Å–∫–æ–ø—Ç–æ—Ä',
            name_en='Microscopes'
        )
        ClassroomFeature.objects.create(
            classroom=lab_room,
            name_ru='–í–µ–Ω—Ç–∏–ª—è—Ü–∏—è',
            name_kg='–í–µ–Ω—Ç–∏–ª—è—Ü–∏—è',
            name_en='Ventilation'
        )


def create_startup_data():
    """Create sample startup data"""
    print("Creating startup data...")
    
    # Create startup categories
    medtech_cat, created = StartupCategory.objects.get_or_create(
        name_ru='–ú–µ–¥—Ç–µ—Ö',
        name_kg='–ú–µ–¥—Ç–µ—Ö',
        name_en='MedTech',
        defaults={'icon': 'ü©∫', 'order': 1}
    )
    
    digital_cat, created = StartupCategory.objects.get_or_create(
        name_ru='–¶–∏—Ñ—Ä–æ–≤–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ',
        name_kg='–°–∞–Ω–∞—Ä–∏–ø—Ç–∏–∫ –¥–µ–Ω —Å–æ–æ–ª—É–∫',
        name_en='Digital Health',
        defaults={'icon': 'üíª', 'order': 2}
    )
    
    biotech_cat, created = StartupCategory.objects.get_or_create(
        name_ru='–ë–∏–æ—Ç–µ—Ö',
        name_kg='–ë–∏–æ—Ç–µ—Ö',  
        name_en='BioTech',
        defaults={'icon': 'üß¨', 'order': 3}
    )
    
    # Create startups
    startup1, created = Startup.objects.get_or_create(
        name_ru='–ú–µ–¥–ê–ø–ø',
        name_kg='–ú–µ–¥–ê–ø–ø',
        name_en='MedApp',
        defaults={
            'category': digital_cat,
            'description_ru': '–ú–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–¥–æ—Ä–æ–≤—å—è',
            'description_kg': '–î–µ–Ω —Å–æ–æ–ª—É–∫—Ç—É –∫”©–∑”©–º”©–ª–¥”©”© “Ø—á“Ø–Ω –º–æ–±–∏–ª–¥–∏–∫ —Ç–∏—Ä–∫–µ–º–µ',
            'description_en': 'Mobile app for health monitoring',
            'full_description_ru': '–ò–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ –º–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–¥–æ—Ä–æ–≤—å—è –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞',
            'full_description_kg': '–ñ–∞—Å–∞–ª–º–∞ –∞–∫—ã–ª –∫–æ–ª–¥–æ–Ω—É—É –º–µ–Ω–µ–Ω –±–µ–π—Ç–∞–ø—Ç–∞—Ä–¥—ã–Ω –¥–µ–Ω —Å–æ–æ–ª—É–≥—É–Ω –∫–æ–º–ø–ª–µ–∫—Å—Ç“Ø“Ø –∫”©–∑”©–º”©–ª–¥”©”© “Ø—á“Ø–Ω –∏–Ω–Ω–æ–≤–∞—Ü–∏—è–ª—ã–∫ –º–æ–±–∏–ª–¥–∏–∫ —Ç–∏—Ä–∫–µ–º–µ',
            'full_description_en': 'Innovative mobile application for comprehensive patient health monitoring using artificial intelligence',
            'stage': 'seed',
            'status': 'active',
            'funding': '$500K',
            'year': '2023',
            'image': 'üì±',
            'order': 1
        }
    )
    
    if created:
        # Add team members
        StartupTeamMember.objects.create(
            startup=startup1,
            name_ru='–î–æ–∫—Ç–æ—Ä –ê–ª–∏–µ–≤ –ê.–ê.',
            name_kg='–î–æ–∫—Ç–æ—Ä –ê–ª–∏–µ–≤ –ê.–ê.',
            name_en='Dr. Aliev A.A.'
        )
        StartupTeamMember.objects.create(
            startup=startup1,
            name_ru='–ò–Ω–∂–µ–Ω–µ—Ä –°–º–∏—Ä–Ω–æ–≤ –ò.–ò.',
            name_kg='–ò–Ω–∂–µ–Ω–µ—Ä –°–º–∏—Ä–Ω–æ–≤ –ò.–ò.',
            name_en='Engineer Smirnov I.I.'
        )
        
        # Add investors
        StartupInvestor.objects.create(
            startup=startup1,
            name_ru='–£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç—Å–∫–∏–π —Ñ–æ–Ω–¥',
            name_kg='–£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç —Ñ–æ–Ω–¥—É',
            name_en='University Fund'
        )
        
        # Add achievements
        StartupAchievement.objects.create(
            startup=startup1,
            achievement_ru='–ü–æ–±–µ–¥–∏—Ç–µ–ª—å –∫–æ–Ω–∫—É—Ä—Å–∞ —Å—Ç–∞—Ä—Ç–∞–ø–æ–≤ 2023',
            achievement_kg='2023-–∂—ã–ª–∫—ã —Å—Ç–∞—Ä—Ç–∞–ø—Ç–∞—Ä —Å—ã–Ω–∞–≥—ã–Ω—ã–Ω –∂–µ“£“Ø“Ø—á“Ø—Å“Ø',
            achievement_en='Winner of Startup Competition 2023'
        )
    
    # Create another startup
    startup2, created = Startup.objects.get_or_create(
        name_ru='–ë–∏–æ–°–µ–Ω—Å–æ—Ä',
        name_kg='–ë–∏–æ–°–µ–Ω—Å–æ—Ä',
        name_en='BioSensor',
        defaults={
            'category': medtech_cat,
            'description_ru': '–ü–æ—Ä—Ç–∞—Ç–∏–≤–Ω—ã–µ –±–∏–æ—Å–µ–Ω—Å–æ—Ä—ã –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏',
            'description_kg': '–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ “Ø—á“Ø–Ω –∫”©—á–º”© –±–∏–æ—Å–µ–Ω—Å–æ—Ä–ª–æ—Ä',
            'description_en': 'Portable biosensors for diagnostics',
            'full_description_ru': '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Ä—Ç–∞—Ç–∏–≤–Ω—ã—Ö –±–∏–æ—Å–µ–Ω—Å–æ—Ä–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π –≤ –ø–æ–ª–µ–≤—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö',
            'full_description_kg': '–¢–∞–ª–∞–∞ —à–∞—Ä—Ç—ã–Ω–¥–∞ –æ–æ—Ä—É–ª–∞—Ä–¥—ã–Ω —Ç–µ–∑ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞—Å—ã “Ø—á“Ø–Ω –∫”©—á–º”© –±–∏–æ—Å–µ–Ω—Å–æ—Ä–ª–æ—Ä–¥—É –∏—à—Ç–µ–ø —á—ã–≥—É—É',
            'full_description_en': 'Development of portable biosensors for rapid disease diagnosis in field conditions',
            'stage': 'series_a',
            'status': 'scaling',
            'funding': '$1.2M',
            'year': '2022',
            'image': 'üìü',
            'order': 2
        }
    )
    
    if created:
        StartupTeamMember.objects.create(
            startup=startup2,
            name_ru='–ü—Ä–æ—Ñ–µ—Å—Å–æ—Ä –ò–≤–∞–Ω–æ–≤ –ü.–ü.',
            name_kg='–ü—Ä–æ—Ñ–µ—Å—Å–æ—Ä –ò–≤–∞–Ω–æ–≤ –ü.–ü.',
            name_en='Professor Ivanov P.P.'
        )
        StartupInvestor.objects.create(
            startup=startup2,
            name_ru='–í–µ–Ω—á—É—Ä–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª',
            name_kg='–í–µ–Ω—á—É—Ä–¥—É–∫ –∫–∞–ø–∏—Ç–∞–ª',
            name_en='Venture Capital'
        )
        StartupAchievement.objects.create(
            startup=startup2,
            achievement_ru='–ü–æ–ª—É—á–µ–Ω –ø–∞—Ç–µ–Ω—Ç –Ω–∞ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—é',
            achievement_kg='–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è–≥–∞ –ø–∞—Ç–µ–Ω—Ç –∞–ª—ã–Ω–¥—ã',
            achievement_en='Patent received for technology'
        )


def main():
    """Main function to create all test data"""
    print("Starting data population...")
    
    try:
        create_classroom_data()
        create_startup_data()
        print("Data population completed successfully!")
        
    except Exception as e:
        print(f"Error during data population: {e}")
        sys.exit(1)


if __name__ == '__main__':
    main()